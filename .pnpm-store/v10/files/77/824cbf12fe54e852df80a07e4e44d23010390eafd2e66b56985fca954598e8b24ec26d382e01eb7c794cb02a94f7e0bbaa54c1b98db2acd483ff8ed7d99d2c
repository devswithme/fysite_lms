{"version":3,"sources":["../../src/schema/fieldToSchemaMap.ts"],"sourcesContent":["import type { GraphQLArgumentConfig, GraphQLFieldConfig, GraphQLOutputType } from 'graphql'\nimport type {\n  ArrayField,\n  BlocksField,\n  CheckboxField,\n  CodeField,\n  CollapsibleField,\n  DateField,\n  EmailField,\n  Field,\n  FlattenedJoinField,\n  GraphQLInfo,\n  GroupField,\n  JoinField,\n  JSONField,\n  NumberField,\n  PointField,\n  RadioField,\n  RelationshipField,\n  RichTextAdapter,\n  RichTextField,\n  RowField,\n  SanitizedConfig,\n  SelectField,\n  TabsField,\n  TextareaField,\n  TextField,\n  UploadField,\n} from 'payload'\n\nimport {\n  GraphQLBoolean,\n  GraphQLEnumType,\n  GraphQLFloat,\n  GraphQLInt,\n  GraphQLList,\n  GraphQLNonNull,\n  GraphQLObjectType,\n  GraphQLString,\n  GraphQLUnionType,\n} from 'graphql'\nimport { DateTimeResolver, EmailAddressResolver } from 'graphql-scalars'\nimport { combineQueries, createDataloaderCacheKey, MissingEditorProp, toWords } from 'payload'\nimport { fieldAffectsData, tabHasName } from 'payload/shared'\n\nimport type { Context } from '../resolvers/types.js'\n\nimport { GraphQLJSON } from '../packages/graphql-type-json/index.js'\nimport { combineParentName } from '../utilities/combineParentName.js'\nimport { formatName } from '../utilities/formatName.js'\nimport { formatOptions } from '../utilities/formatOptions.js'\nimport { buildObjectType, type ObjectTypeConfig } from './buildObjectType.js'\nimport { isFieldNullable } from './isFieldNullable.js'\nimport { withNullableType } from './withNullableType.js'\n\nfunction formattedNameResolver({\n  field,\n  ...rest\n}: { field: Field } & GraphQLFieldConfig<any, any, any>): GraphQLFieldConfig<any, any, any> {\n  if ('name' in field) {\n    if (formatName(field.name) !== field.name) {\n      return {\n        ...rest,\n        resolve: (parent) => parent[field.name],\n      }\n    }\n  }\n  return rest\n}\n\ntype SharedArgs = {\n  collectionSlug?: string\n  config: SanitizedConfig\n  forceNullable?: boolean\n  graphqlResult: GraphQLInfo\n  newlyCreatedBlockType: GraphQLObjectType\n  objectTypeConfig: ObjectTypeConfig\n  parentIsLocalized?: boolean\n  parentName: string\n}\n\ntype GenericFieldToSchemaMap = (args: { field: Field } & SharedArgs) => ObjectTypeConfig\n\ntype FieldToSchemaMap = {\n  array: (args: { field: ArrayField } & SharedArgs) => ObjectTypeConfig\n  blocks: (args: { field: BlocksField } & SharedArgs) => ObjectTypeConfig\n  checkbox: (args: { field: CheckboxField } & SharedArgs) => ObjectTypeConfig\n  code: (args: { field: CodeField } & SharedArgs) => ObjectTypeConfig\n  collapsible: (args: { field: CollapsibleField } & SharedArgs) => ObjectTypeConfig\n  date: (args: { field: DateField } & SharedArgs) => ObjectTypeConfig\n  email: (args: { field: EmailField } & SharedArgs) => ObjectTypeConfig\n  group: (args: { field: GroupField } & SharedArgs) => ObjectTypeConfig\n  join: (args: { field: JoinField } & SharedArgs) => ObjectTypeConfig\n  json: (args: { field: JSONField } & SharedArgs) => ObjectTypeConfig\n  number: (args: { field: NumberField } & SharedArgs) => ObjectTypeConfig\n  point: (args: { field: PointField } & SharedArgs) => ObjectTypeConfig\n  radio: (args: { field: RadioField } & SharedArgs) => ObjectTypeConfig\n  relationship: (args: { field: RelationshipField } & SharedArgs) => ObjectTypeConfig\n  richText: (args: { field: RichTextField } & SharedArgs) => ObjectTypeConfig\n  row: (args: { field: RowField } & SharedArgs) => ObjectTypeConfig\n  select: (args: { field: SelectField } & SharedArgs) => ObjectTypeConfig\n  tabs: (args: { field: TabsField } & SharedArgs) => ObjectTypeConfig\n  text: (args: { field: TextField } & SharedArgs) => ObjectTypeConfig\n  textarea: (args: { field: TextareaField } & SharedArgs) => ObjectTypeConfig\n  upload: (args: { field: UploadField } & SharedArgs) => ObjectTypeConfig\n}\n\nexport const fieldToSchemaMap: FieldToSchemaMap = {\n  array: ({\n    config,\n    field,\n    forceNullable,\n    graphqlResult,\n    objectTypeConfig,\n    parentIsLocalized,\n    parentName,\n  }) => {\n    const interfaceName =\n      field?.interfaceName || combineParentName(parentName, toWords(field.name, true))\n\n    if (!graphqlResult.types.arrayTypes[interfaceName]) {\n      const objectType = buildObjectType({\n        name: interfaceName,\n        config,\n        fields: field.fields,\n        forceNullable: isFieldNullable({ field, forceNullable, parentIsLocalized }),\n        graphqlResult,\n        parentIsLocalized: field.localized || parentIsLocalized,\n        parentName: interfaceName,\n      })\n\n      if (Object.keys(objectType.getFields()).length) {\n        graphqlResult.types.arrayTypes[interfaceName] = objectType\n      }\n    }\n\n    if (!graphqlResult.types.arrayTypes[interfaceName]) {\n      return objectTypeConfig\n    }\n\n    const arrayType = new GraphQLList(\n      new GraphQLNonNull(graphqlResult.types.arrayTypes[interfaceName]),\n    )\n\n    return {\n      ...objectTypeConfig,\n      [formatName(field.name)]: formattedNameResolver({\n        type: withNullableType({ type: arrayType, field, parentIsLocalized }) as GraphQLOutputType,\n        field,\n      }),\n    }\n  },\n  blocks: ({\n    config,\n    field,\n    forceNullable,\n    graphqlResult,\n    objectTypeConfig,\n    parentIsLocalized,\n    parentName,\n  }) => {\n    const blockTypes: GraphQLObjectType<any, any>[] = (\n      field.blockReferences ?? field.blocks\n    ).reduce((acc, _block) => {\n      const blockSlug = typeof _block === 'string' ? _block : _block.slug\n      if (!graphqlResult.types.blockTypes[blockSlug]) {\n        // TODO: iterate over blocks mapped to block slug in v4, or pass through payload.blocks\n        const block =\n          typeof _block === 'string' ? config.blocks.find((b) => b.slug === _block) : _block\n\n        const interfaceName =\n          block?.interfaceName || block?.graphQL?.singularName || toWords(block.slug, true)\n\n        const objectType = buildObjectType({\n          name: interfaceName,\n          config,\n          fields: [\n            ...block.fields,\n            {\n              name: 'blockType',\n              type: 'text',\n            },\n          ],\n          forceNullable,\n          graphqlResult,\n          parentIsLocalized,\n          parentName: interfaceName,\n        })\n\n        if (Object.keys(objectType.getFields()).length) {\n          graphqlResult.types.blockTypes[block.slug] = objectType\n        }\n      }\n\n      if (graphqlResult.types.blockTypes[blockSlug]) {\n        acc.push(graphqlResult.types.blockTypes[blockSlug])\n      }\n\n      return acc\n    }, [])\n\n    if (blockTypes.length === 0) {\n      return objectTypeConfig\n    }\n\n    const fullName = combineParentName(parentName, toWords(field.name, true))\n\n    const type = new GraphQLList(\n      new GraphQLNonNull(\n        new GraphQLUnionType({\n          name: fullName,\n          resolveType: (data) => graphqlResult.types.blockTypes[data.blockType].name,\n          types: blockTypes,\n        }),\n      ),\n    ) as GraphQLOutputType\n\n    return {\n      ...objectTypeConfig,\n      [formatName(field.name)]: formattedNameResolver({\n        type: withNullableType({ type, field, parentIsLocalized }) as GraphQLOutputType,\n        field,\n      }),\n    }\n  },\n  checkbox: ({ field, forceNullable, objectTypeConfig, parentIsLocalized }) => ({\n    ...objectTypeConfig,\n    [formatName(field.name)]: formattedNameResolver({\n      type: withNullableType({\n        type: GraphQLBoolean,\n        field,\n        forceNullable,\n        parentIsLocalized,\n      }) as GraphQLOutputType,\n      field,\n    }),\n  }),\n  code: ({ field, forceNullable, objectTypeConfig, parentIsLocalized }) => ({\n    ...objectTypeConfig,\n    [formatName(field.name)]: formattedNameResolver({\n      type: withNullableType({\n        type: GraphQLString,\n        field,\n        forceNullable,\n        parentIsLocalized,\n      }) as GraphQLOutputType,\n      field,\n    }),\n  }),\n  collapsible: ({\n    config,\n    field,\n    forceNullable,\n    graphqlResult,\n    newlyCreatedBlockType,\n    objectTypeConfig,\n    parentIsLocalized,\n    parentName,\n  }) =>\n    field.fields.reduce((objectTypeConfigWithCollapsibleFields, subField) => {\n      const addSubField: GenericFieldToSchemaMap = fieldToSchemaMap[subField.type]\n      if (addSubField) {\n        return addSubField({\n          config,\n          field: subField,\n          forceNullable,\n          graphqlResult,\n          newlyCreatedBlockType,\n          objectTypeConfig: objectTypeConfigWithCollapsibleFields,\n          parentIsLocalized,\n          parentName,\n        })\n      }\n      return objectTypeConfigWithCollapsibleFields\n    }, objectTypeConfig),\n  date: ({ field, forceNullable, objectTypeConfig, parentIsLocalized }) => ({\n    ...objectTypeConfig,\n    [formatName(field.name)]: formattedNameResolver({\n      type: withNullableType({\n        type: DateTimeResolver,\n        field,\n        forceNullable,\n        parentIsLocalized,\n      }) as GraphQLOutputType,\n      field,\n    }),\n  }),\n  email: ({ field, forceNullable, objectTypeConfig, parentIsLocalized }) => ({\n    ...objectTypeConfig,\n    [formatName(field.name)]: formattedNameResolver({\n      type: withNullableType({\n        type: EmailAddressResolver,\n        field,\n        forceNullable,\n        parentIsLocalized,\n      }) as GraphQLOutputType,\n      field,\n    }),\n  }),\n  group: ({\n    config,\n    field,\n    forceNullable,\n    graphqlResult,\n    newlyCreatedBlockType,\n    objectTypeConfig,\n    parentIsLocalized,\n    parentName,\n  }) => {\n    if (fieldAffectsData(field)) {\n      const interfaceName =\n        field?.interfaceName || combineParentName(parentName, toWords(field.name, true))\n\n      if (!graphqlResult.types.groupTypes[interfaceName]) {\n        const objectType = buildObjectType({\n          name: interfaceName,\n          config,\n          fields: field.fields,\n          forceNullable: isFieldNullable({ field, forceNullable, parentIsLocalized }),\n          graphqlResult,\n          parentIsLocalized: field.localized || parentIsLocalized,\n          parentName: interfaceName,\n        })\n\n        if (Object.keys(objectType.getFields()).length) {\n          graphqlResult.types.groupTypes[interfaceName] = objectType\n        }\n      }\n\n      if (!graphqlResult.types.groupTypes[interfaceName]) {\n        return objectTypeConfig\n      }\n\n      return {\n        ...objectTypeConfig,\n        [formatName(field.name)]: {\n          type: graphqlResult.types.groupTypes[interfaceName],\n          resolve: (parent, args, context: Context) => {\n            return {\n              ...parent[field.name],\n              _id: parent._id ?? parent.id,\n            }\n          },\n        },\n      }\n    } else {\n      return field.fields.reduce((objectTypeConfigWithCollapsibleFields, subField) => {\n        const addSubField: GenericFieldToSchemaMap = fieldToSchemaMap[subField.type]\n        if (addSubField) {\n          return addSubField({\n            config,\n            field: subField,\n            forceNullable,\n            graphqlResult,\n            newlyCreatedBlockType,\n            objectTypeConfig: objectTypeConfigWithCollapsibleFields,\n            parentIsLocalized,\n            parentName,\n          })\n        }\n        return objectTypeConfigWithCollapsibleFields\n      }, objectTypeConfig)\n    }\n  },\n  join: ({ collectionSlug, field, graphqlResult, objectTypeConfig, parentName }) => {\n    const joinName = combineParentName(parentName, toWords(field.name, true))\n\n    const joinType = {\n      type: new GraphQLObjectType({\n        name: joinName,\n        fields: {\n          docs: {\n            type: new GraphQLNonNull(\n              Array.isArray(field.collection)\n                ? GraphQLJSON\n                : new GraphQLList(\n                    new GraphQLNonNull(graphqlResult.collections[field.collection].graphQL.type),\n                  ),\n            ),\n          },\n          hasNextPage: { type: new GraphQLNonNull(GraphQLBoolean) },\n        },\n      }),\n      args: {\n        limit: {\n          type: GraphQLInt,\n        },\n        page: {\n          type: GraphQLInt,\n        },\n        sort: {\n          type: GraphQLString,\n        },\n        where: {\n          type: Array.isArray(field.collection)\n            ? GraphQLJSON\n            : graphqlResult.collections[field.collection].graphQL.whereInputType,\n        },\n      },\n      extensions: {\n        complexity: typeof field?.graphQL?.complexity === 'number' ? field.graphQL.complexity : 10,\n      },\n      async resolve(parent, args, context: Context) {\n        const { collection } = field\n        const { limit, page, sort, where } = args\n        const { req } = context\n\n        const draft = Boolean(args.draft ?? context.req.query?.draft)\n\n        const targetField = (field as FlattenedJoinField).targetField\n\n        const fullWhere = combineQueries(\n          where,\n          Array.isArray(targetField.relationTo)\n            ? {\n                [field.on]: {\n                  equals: {\n                    relationTo: collectionSlug,\n                    value: parent._id ?? parent.id,\n                  },\n                },\n              }\n            : {\n                [field.on]: { equals: parent._id ?? parent.id },\n              },\n        )\n\n        if (Array.isArray(collection)) {\n          throw new Error('GraphQL with array of join.field.collection is not implemented')\n        }\n\n        const { docs } = await req.payload.find({\n          collection,\n          depth: 0,\n          draft,\n          fallbackLocale: req.fallbackLocale,\n          // Fetch one extra document to determine if there are more documents beyond the requested limit (used for hasNextPage calculation).\n          limit: typeof limit === 'number' && limit > 0 ? limit + 1 : 0,\n          locale: req.locale,\n          overrideAccess: false,\n          page,\n          pagination: false,\n          req,\n          sort,\n          where: fullWhere,\n        })\n\n        let shouldSlice = false\n\n        if (typeof limit === 'number' && limit !== 0 && limit < docs.length) {\n          shouldSlice = true\n        }\n\n        return {\n          docs: shouldSlice ? docs.slice(0, -1) : docs,\n          hasNextPage: limit === 0 ? false : limit < docs.length,\n        }\n      },\n    }\n\n    return {\n      ...objectTypeConfig,\n      [formatName(field.name)]: joinType,\n    }\n  },\n  json: ({ field, forceNullable, objectTypeConfig, parentIsLocalized }) => ({\n    ...objectTypeConfig,\n    [formatName(field.name)]: formattedNameResolver({\n      type: withNullableType({\n        type: GraphQLJSON,\n        field,\n        forceNullable,\n        parentIsLocalized,\n      }) as GraphQLOutputType,\n      field,\n    }),\n  }),\n  number: ({ field, forceNullable, objectTypeConfig, parentIsLocalized }) => {\n    const type = field?.name === 'id' ? GraphQLInt : GraphQLFloat\n    return {\n      ...objectTypeConfig,\n      [formatName(field.name)]: formattedNameResolver({\n        type: withNullableType({\n          type: field?.hasMany === true ? new GraphQLList(new GraphQLNonNull(type)) : type,\n          field,\n          forceNullable,\n          parentIsLocalized,\n        }) as GraphQLOutputType,\n        field,\n      }),\n    }\n  },\n  point: ({ field, forceNullable, objectTypeConfig, parentIsLocalized }) => ({\n    ...objectTypeConfig,\n    [formatName(field.name)]: formattedNameResolver({\n      type: withNullableType({\n        type: new GraphQLList(new GraphQLNonNull(GraphQLFloat)),\n        field,\n        forceNullable,\n        parentIsLocalized,\n      }) as GraphQLOutputType,\n      field,\n    }),\n  }),\n  radio: ({ field, forceNullable, objectTypeConfig, parentIsLocalized, parentName }) => ({\n    ...objectTypeConfig,\n    [formatName(field.name)]: formattedNameResolver({\n      type: withNullableType({\n        type: new GraphQLEnumType({\n          name: combineParentName(parentName, field.name),\n          values: formatOptions(field),\n        }),\n        field,\n        forceNullable,\n        parentIsLocalized,\n      }) as GraphQLOutputType,\n      field,\n    }),\n  }),\n  relationship: ({\n    config,\n    field,\n    forceNullable,\n    graphqlResult,\n    newlyCreatedBlockType,\n    objectTypeConfig,\n    parentIsLocalized,\n    parentName,\n  }) => {\n    const { relationTo } = field\n    const isRelatedToManyCollections = Array.isArray(relationTo)\n    const hasManyValues = field.hasMany\n    const relationshipName = combineParentName(parentName, toWords(field.name, true))\n\n    let type: GraphQLOutputType\n    let relationToType = null\n\n    const graphQLCollections = config.collections.filter(\n      (collectionConfig) => collectionConfig.graphQL !== false,\n    )\n\n    if (Array.isArray(relationTo)) {\n      relationToType = new GraphQLEnumType({\n        name: `${relationshipName}_RelationTo`,\n        values: relationTo\n          .filter((relation) =>\n            graphQLCollections.some((collection) => collection.slug === relation),\n          )\n          .reduce(\n            (relations, relation) => ({\n              ...relations,\n              [formatName(relation)]: {\n                value: relation,\n              },\n            }),\n            {},\n          ),\n      })\n\n      // Only pass collections that are GraphQL enabled\n      const types = relationTo\n        .filter((relation) => graphQLCollections.some((collection) => collection.slug === relation))\n        .map((relation) => graphqlResult.collections[relation]?.graphQL.type)\n\n      type = new GraphQLObjectType({\n        name: `${relationshipName}_Relationship`,\n        fields: {\n          relationTo: {\n            type: relationToType,\n          },\n          value: {\n            type: new GraphQLUnionType({\n              name: relationshipName,\n              resolveType(data) {\n                return graphqlResult.collections[data.collection].graphQL.type.name\n              },\n              types,\n            }) as GraphQLOutputType,\n          },\n        },\n      }) as GraphQLOutputType\n    } else {\n      ;({ type } = graphqlResult.collections[relationTo].graphQL)\n    }\n\n    // If the relationshipType is undefined at this point,\n    // it can be assumed that this blockType can have a relationship\n    // to itself. Therefore, we set the relationshipType equal to the blockType\n    // that is currently being created.\n\n    type = type || newlyCreatedBlockType\n\n    const relationshipArgs: {\n      draft: GraphQLArgumentConfig\n      fallbackLocale: GraphQLArgumentConfig\n      limit: GraphQLArgumentConfig\n      locale: GraphQLArgumentConfig\n      page: GraphQLArgumentConfig\n      where: GraphQLArgumentConfig\n    } = {} as any\n\n    const relationsUseDrafts = (Array.isArray(relationTo) ? relationTo : [relationTo])\n      .filter((relation) => graphQLCollections.some((collection) => collection.slug === relation))\n      .some((relation) => graphqlResult.collections[relation].config.versions?.drafts)\n\n    if (relationsUseDrafts) {\n      relationshipArgs.draft = {\n        type: GraphQLBoolean,\n      }\n    }\n\n    if (config.localization) {\n      relationshipArgs.locale = {\n        type: graphqlResult.types.localeInputType,\n      }\n\n      relationshipArgs.fallbackLocale = {\n        type: graphqlResult.types.fallbackLocaleInputType,\n      }\n    }\n\n    const relationship: GraphQLFieldConfig<any, any, any> = {\n      type: withNullableType({\n        type: hasManyValues ? new GraphQLList(new GraphQLNonNull(type)) : type,\n        field,\n        forceNullable,\n        parentIsLocalized,\n      }) as GraphQLOutputType,\n      args: relationshipArgs,\n      extensions: {\n        complexity: typeof field?.graphQL?.complexity === 'number' ? field.graphQL.complexity : 10,\n      },\n      async resolve(parent, args, context: Context) {\n        const value = parent[field.name]\n        const locale = args.locale || context.req.locale\n        const fallbackLocale = args.fallbackLocale || context.req.fallbackLocale\n        let relatedCollectionSlug = field.relationTo\n        const draft = Boolean(args.draft ?? context.req.query?.draft)\n\n        if (hasManyValues) {\n          const results = []\n          const resultPromises = []\n\n          const createPopulationPromise = async (relatedDoc, i) => {\n            let id = relatedDoc\n            let collectionSlug = field.relationTo\n            const isValidGraphQLCollection = isRelatedToManyCollections\n              ? graphQLCollections.some((collection) => collectionSlug.includes(collection.slug))\n              : graphQLCollections.some((collection) => collectionSlug === collection.slug)\n\n            if (isValidGraphQLCollection) {\n              if (isRelatedToManyCollections) {\n                collectionSlug = relatedDoc.relationTo\n                id = relatedDoc.value\n              }\n\n              const result = await context.req.payloadDataLoader.load(\n                createDataloaderCacheKey({\n                  collectionSlug: collectionSlug as string,\n                  currentDepth: 0,\n                  depth: 0,\n                  docID: id,\n                  draft,\n                  fallbackLocale,\n                  locale,\n                  overrideAccess: false,\n                  showHiddenFields: false,\n                  transactionID: context.req.transactionID,\n                }),\n              )\n\n              if (result) {\n                if (isRelatedToManyCollections) {\n                  results[i] = {\n                    relationTo: collectionSlug,\n                    value: {\n                      ...result,\n                      collection: collectionSlug,\n                    },\n                  }\n                } else {\n                  results[i] = result\n                }\n              }\n            }\n          }\n\n          if (value) {\n            value.forEach((relatedDoc, i) => {\n              resultPromises.push(createPopulationPromise(relatedDoc, i))\n            })\n          }\n\n          await Promise.all(resultPromises)\n          return results\n        }\n\n        let id = value\n        if (isRelatedToManyCollections && value) {\n          id = value.value\n          relatedCollectionSlug = value.relationTo\n        }\n\n        if (id) {\n          if (graphQLCollections.some((collection) => collection.slug === relatedCollectionSlug)) {\n            const relatedDocument = await context.req.payloadDataLoader.load(\n              createDataloaderCacheKey({\n                collectionSlug: relatedCollectionSlug as string,\n                currentDepth: 0,\n                depth: 0,\n                docID: id,\n                draft,\n                fallbackLocale,\n                locale,\n                overrideAccess: false,\n                showHiddenFields: false,\n                transactionID: context.req.transactionID,\n              }),\n            )\n\n            if (relatedDocument) {\n              if (isRelatedToManyCollections) {\n                return {\n                  relationTo: relatedCollectionSlug,\n                  value: {\n                    ...relatedDocument,\n                    collection: relatedCollectionSlug,\n                  },\n                }\n              }\n\n              return relatedDocument\n            }\n          }\n\n          return null\n        }\n\n        return null\n      },\n    }\n\n    return {\n      ...objectTypeConfig,\n      [formatName(field.name)]: relationship,\n    }\n  },\n  richText: ({ config, field, forceNullable, objectTypeConfig, parentIsLocalized }) => ({\n    ...objectTypeConfig,\n    [formatName(field.name)]: {\n      type: withNullableType({\n        type: GraphQLJSON,\n        field,\n        forceNullable,\n        parentIsLocalized,\n      }) as GraphQLOutputType,\n      args: {\n        depth: {\n          type: GraphQLInt,\n        },\n      },\n      async resolve(parent, args, context: Context) {\n        let depth = config.defaultDepth\n        if (typeof args.depth !== 'undefined') {\n          depth = args.depth\n        }\n        if (!field?.editor) {\n          throw new MissingEditorProp(field) // while we allow disabling editor functionality, you should not have any richText fields defined if you do not have an editor\n        }\n\n        if (typeof field?.editor === 'function') {\n          throw new Error('Attempted to access unsanitized rich text editor.')\n        }\n\n        const editor: RichTextAdapter = field?.editor\n\n        // RichText fields have their own depth argument in GraphQL.\n        // This is why the populationPromise (which populates richtext fields like uploads and relationships)\n        // is run here again, with the provided depth.\n        // In the graphql find.ts resolver, the depth is then hard-coded to 0.\n        // Effectively, this means that the populationPromise for GraphQL is only run here, and not in the find.ts resolver / normal population promise.\n        if (editor?.graphQLPopulationPromises) {\n          const fieldPromises = []\n          const populationPromises = []\n          const populateDepth =\n            field?.maxDepth !== undefined && field?.maxDepth < depth ? field?.maxDepth : depth\n\n          editor?.graphQLPopulationPromises({\n            context,\n            depth: populateDepth,\n            draft: args.draft,\n            field,\n            fieldPromises,\n            findMany: false,\n            flattenLocales: false,\n            overrideAccess: false,\n            parentIsLocalized,\n            populationPromises,\n            req: context.req,\n            showHiddenFields: false,\n            siblingDoc: parent,\n          })\n          await Promise.all(fieldPromises)\n          await Promise.all(populationPromises)\n        }\n\n        return parent[field.name]\n      },\n    },\n  }),\n  row: ({ field, objectTypeConfig, ...rest }) =>\n    field.fields.reduce((objectTypeConfigWithRowFields, subField) => {\n      const addSubField: GenericFieldToSchemaMap = fieldToSchemaMap[subField.type]\n      if (addSubField) {\n        return addSubField({\n          field: subField,\n          objectTypeConfig: objectTypeConfigWithRowFields,\n          ...rest,\n        })\n      }\n      return objectTypeConfigWithRowFields\n    }, objectTypeConfig),\n  select: ({ field, forceNullable, objectTypeConfig, parentIsLocalized, parentName }) => {\n    const fullName = combineParentName(parentName, field.name)\n\n    let type: GraphQLOutputType = new GraphQLEnumType({\n      name: fullName,\n      values: formatOptions(field),\n    })\n\n    type = field.hasMany ? new GraphQLList(new GraphQLNonNull(type)) : type\n    type = withNullableType({ type, field, forceNullable, parentIsLocalized }) as GraphQLOutputType\n\n    return {\n      ...objectTypeConfig,\n      [formatName(field.name)]: formattedNameResolver({ type, field }),\n    }\n  },\n  tabs: ({\n    config,\n    field,\n    forceNullable,\n    graphqlResult,\n    newlyCreatedBlockType,\n    objectTypeConfig,\n    parentIsLocalized,\n    parentName,\n  }) =>\n    field.tabs.reduce((tabSchema, tab) => {\n      if (tabHasName(tab)) {\n        const interfaceName =\n          tab?.interfaceName || combineParentName(parentName, toWords(tab.name, true))\n\n        if (!graphqlResult.types.groupTypes[interfaceName]) {\n          const objectType = buildObjectType({\n            name: interfaceName,\n            config,\n            fields: tab.fields,\n            forceNullable,\n            graphqlResult,\n            parentIsLocalized: tab.localized || parentIsLocalized,\n            parentName: interfaceName,\n          })\n\n          if (Object.keys(objectType.getFields()).length) {\n            graphqlResult.types.groupTypes[interfaceName] = objectType\n          }\n        }\n\n        if (!graphqlResult.types.groupTypes[interfaceName]) {\n          return tabSchema\n        }\n\n        return {\n          ...tabSchema,\n          [tab.name]: {\n            type: graphqlResult.types.groupTypes[interfaceName],\n            resolve(parent, args, context: Context) {\n              return {\n                ...parent[tab.name],\n                _id: parent._id ?? parent.id,\n              }\n            },\n          },\n        }\n      }\n\n      return {\n        ...tabSchema,\n        ...tab.fields.reduce((subFieldSchema, subField) => {\n          const addSubField: GenericFieldToSchemaMap = fieldToSchemaMap[subField.type]\n          if (addSubField) {\n            return addSubField({\n              config,\n              field: subField,\n              forceNullable,\n              graphqlResult,\n              newlyCreatedBlockType,\n              objectTypeConfig: subFieldSchema,\n              parentIsLocalized,\n              parentName,\n            })\n          }\n          return subFieldSchema\n        }, tabSchema),\n      }\n    }, objectTypeConfig),\n  text: ({ field, forceNullable, objectTypeConfig, parentIsLocalized }) => ({\n    ...objectTypeConfig,\n    [formatName(field.name)]: formattedNameResolver({\n      type: withNullableType({\n        type:\n          field.hasMany === true\n            ? new GraphQLList(new GraphQLNonNull(GraphQLString))\n            : GraphQLString,\n        field,\n        forceNullable,\n        parentIsLocalized,\n      }) as GraphQLOutputType,\n      field,\n    }),\n  }),\n  textarea: ({ field, forceNullable, objectTypeConfig, parentIsLocalized }) => ({\n    ...objectTypeConfig,\n    [formatName(field.name)]: formattedNameResolver({\n      type: withNullableType({\n        type: GraphQLString,\n        field,\n        forceNullable,\n        parentIsLocalized,\n      }) as GraphQLOutputType,\n      field,\n    }),\n  }),\n  upload: ({\n    config,\n    field,\n    forceNullable,\n    graphqlResult,\n    newlyCreatedBlockType,\n    objectTypeConfig,\n    parentIsLocalized,\n    parentName,\n  }) => {\n    const { relationTo } = field\n    const isRelatedToManyCollections = Array.isArray(relationTo)\n    const hasManyValues = field.hasMany\n    const relationshipName = combineParentName(parentName, toWords(field.name, true))\n\n    let type\n    let relationToType = null\n\n    if (Array.isArray(relationTo)) {\n      relationToType = new GraphQLEnumType({\n        name: `${relationshipName}_RelationTo`,\n        values: relationTo.reduce(\n          (relations, relation) => ({\n            ...relations,\n            [formatName(relation)]: {\n              value: relation,\n            },\n          }),\n          {},\n        ),\n      })\n\n      const types = relationTo.map((relation) => graphqlResult.collections[relation].graphQL.type)\n\n      type = new GraphQLObjectType({\n        name: `${relationshipName}_Relationship`,\n        fields: {\n          relationTo: {\n            type: relationToType,\n          },\n          value: {\n            type: new GraphQLUnionType({\n              name: relationshipName,\n              resolveType(data) {\n                return graphqlResult.collections[data.collection].graphQL.type.name\n              },\n              types,\n            }),\n          },\n        },\n      })\n    } else {\n      ;({ type } = graphqlResult.collections[relationTo].graphQL)\n    }\n\n    // If the relationshipType is undefined at this point,\n    // it can be assumed that this blockType can have a relationship\n    // to itself. Therefore, we set the relationshipType equal to the blockType\n    // that is currently being created.\n\n    type = type || newlyCreatedBlockType\n\n    const relationshipArgs: {\n      draft?: GraphQLArgumentConfig\n      fallbackLocale?: GraphQLArgumentConfig\n      limit?: GraphQLArgumentConfig\n      locale?: GraphQLArgumentConfig\n      page?: GraphQLArgumentConfig\n      where?: GraphQLArgumentConfig\n    } = {} as any\n\n    const relationsUseDrafts = (Array.isArray(relationTo) ? relationTo : [relationTo]).some(\n      (relation) => graphqlResult.collections[relation].config.versions?.drafts,\n    )\n\n    if (relationsUseDrafts) {\n      relationshipArgs.draft = {\n        type: GraphQLBoolean,\n      }\n    }\n\n    if (config.localization) {\n      relationshipArgs.locale = {\n        type: graphqlResult.types.localeInputType,\n      }\n\n      relationshipArgs.fallbackLocale = {\n        type: graphqlResult.types.fallbackLocaleInputType,\n      }\n    }\n\n    const relationship = {\n      type: withNullableType({\n        type: hasManyValues ? new GraphQLList(new GraphQLNonNull(type)) : type,\n        field,\n        forceNullable,\n        parentIsLocalized,\n      }) as GraphQLOutputType,\n      args: relationshipArgs,\n      extensions: {\n        complexity: typeof field?.graphQL?.complexity === 'number' ? field.graphQL.complexity : 10,\n      },\n      async resolve(parent, args, context: Context) {\n        const value = parent[field.name]\n        const locale = args.locale || context.req.locale\n        const fallbackLocale = args.fallbackLocale || context.req.fallbackLocale\n        let relatedCollectionSlug = field.relationTo\n        const draft = Boolean(args.draft ?? context.req.query?.draft)\n\n        if (hasManyValues) {\n          const results = []\n          const resultPromises = []\n\n          const createPopulationPromise = async (relatedDoc, i) => {\n            let id = relatedDoc\n            let collectionSlug = field.relationTo\n\n            if (isRelatedToManyCollections) {\n              collectionSlug = relatedDoc.relationTo\n              id = relatedDoc.value\n            }\n\n            const result = await context.req.payloadDataLoader.load(\n              createDataloaderCacheKey({\n                collectionSlug,\n                currentDepth: 0,\n                depth: 0,\n                docID: id,\n                draft,\n                fallbackLocale,\n                locale,\n                overrideAccess: false,\n                showHiddenFields: false,\n                transactionID: context.req.transactionID,\n              }),\n            )\n\n            if (result) {\n              if (isRelatedToManyCollections) {\n                results[i] = {\n                  relationTo: collectionSlug,\n                  value: {\n                    ...result,\n                    collection: collectionSlug,\n                  },\n                }\n              } else {\n                results[i] = result\n              }\n            }\n          }\n\n          if (value) {\n            value.forEach((relatedDoc, i) => {\n              resultPromises.push(createPopulationPromise(relatedDoc, i))\n            })\n          }\n\n          await Promise.all(resultPromises)\n          return results\n        }\n\n        let id = value\n        if (isRelatedToManyCollections && value) {\n          id = value.value\n          relatedCollectionSlug = value.relationTo\n        }\n\n        if (id) {\n          const relatedDocument = await context.req.payloadDataLoader.load(\n            createDataloaderCacheKey({\n              collectionSlug: relatedCollectionSlug,\n              currentDepth: 0,\n              depth: 0,\n              docID: id,\n              draft,\n              fallbackLocale,\n              locale,\n              overrideAccess: false,\n              showHiddenFields: false,\n              transactionID: context.req.transactionID,\n            }),\n          )\n\n          if (relatedDocument) {\n            if (isRelatedToManyCollections) {\n              return {\n                relationTo: relatedCollectionSlug,\n                value: {\n                  ...relatedDocument,\n                  collection: relatedCollectionSlug,\n                },\n              }\n            }\n\n            return relatedDocument\n          }\n\n          return null\n        }\n\n        return null\n      },\n    }\n\n    return {\n      ...objectTypeConfig,\n      [formatName(field.name)]: relationship,\n    }\n  },\n}\n"],"names":["GraphQLBoolean","GraphQLEnumType","GraphQLFloat","GraphQLInt","GraphQLList","GraphQLNonNull","GraphQLObjectType","GraphQLString","GraphQLUnionType","DateTimeResolver","EmailAddressResolver","combineQueries","createDataloaderCacheKey","MissingEditorProp","toWords","fieldAffectsData","tabHasName","GraphQLJSON","combineParentName","formatName","formatOptions","buildObjectType","isFieldNullable","withNullableType","formattedNameResolver","field","rest","name","resolve","parent","fieldToSchemaMap","array","config","forceNullable","graphqlResult","objectTypeConfig","parentIsLocalized","parentName","interfaceName","types","arrayTypes","objectType","fields","localized","Object","keys","getFields","length","arrayType","type","blocks","blockTypes","blockReferences","reduce","acc","_block","blockSlug","slug","block","find","b","graphQL","singularName","push","fullName","resolveType","data","blockType","checkbox","code","collapsible","newlyCreatedBlockType","objectTypeConfigWithCollapsibleFields","subField","addSubField","date","email","group","groupTypes","args","context","_id","id","join","collectionSlug","joinName","joinType","docs","Array","isArray","collection","collections","hasNextPage","limit","page","sort","where","whereInputType","extensions","complexity","req","draft","Boolean","query","targetField","fullWhere","relationTo","on","equals","value","Error","payload","depth","fallbackLocale","locale","overrideAccess","pagination","shouldSlice","slice","json","number","hasMany","point","radio","values","relationship","isRelatedToManyCollections","hasManyValues","relationshipName","relationToType","graphQLCollections","filter","collectionConfig","relation","some","relations","map","relationshipArgs","relationsUseDrafts","versions","drafts","localization","localeInputType","fallbackLocaleInputType","relatedCollectionSlug","results","resultPromises","createPopulationPromise","relatedDoc","i","isValidGraphQLCollection","includes","result","payloadDataLoader","load","currentDepth","docID","showHiddenFields","transactionID","forEach","Promise","all","relatedDocument","richText","defaultDepth","editor","graphQLPopulationPromises","fieldPromises","populationPromises","populateDepth","maxDepth","undefined","findMany","flattenLocales","siblingDoc","row","objectTypeConfigWithRowFields","select","tabs","tabSchema","tab","subFieldSchema","text","textarea","upload"],"mappings":"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"}