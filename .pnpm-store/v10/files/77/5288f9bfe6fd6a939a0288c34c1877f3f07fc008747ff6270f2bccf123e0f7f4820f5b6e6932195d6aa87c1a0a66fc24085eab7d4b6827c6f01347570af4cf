{"version":3,"file":"index.js","names":["notFound","renderListView","TrashView","args","List","TrashList","enableRowSelections","query","trash","viewType","error","message","console"],"sources":["../../../src/views/CollectionTrash/index.tsx"],"sourcesContent":["import type { AdminViewServerProps, ListQuery } from 'payload'\nimport type React from 'react'\n\nimport { notFound } from 'next/navigation.js'\n\nimport { renderListView } from '../List/index.js'\n\ntype RenderTrashViewArgs = {\n  customCellProps?: Record<string, any>\n  disableBulkDelete?: boolean\n  disableBulkEdit?: boolean\n  disableQueryPresets?: boolean\n  drawerSlug?: string\n  enableRowSelections: boolean\n  overrideEntityVisibility?: boolean\n  query: ListQuery\n  redirectAfterDelete?: boolean\n  redirectAfterDuplicate?: boolean\n  redirectAfterRestore?: boolean\n} & AdminViewServerProps\n\nexport const TrashView: React.FC<\n  { query?: any } & Omit<RenderTrashViewArgs, 'enableRowSelections'>\n> = async (args) => {\n  try {\n    const { List: TrashList } = await renderListView({\n      ...args,\n      enableRowSelections: true,\n      query: {\n        ...(args.query || {}),\n        trash: true, // force trash view\n      },\n      viewType: 'trash',\n    })\n\n    return TrashList\n  } catch (error) {\n    if (error.message === 'not-found') {\n      notFound()\n    }\n    console.error(error) // eslint-disable-line no-console\n  }\n}\n"],"mappings":"AAGA,SAASA,QAAQ,QAAQ;AAEzB,SAASC,cAAc,QAAQ;AAgB/B,OAAO,MAAMC,SAAA,GAET,MAAOC,IAAA;EACT,IAAI;IACF,MAAM;MAAEC,IAAA,EAAMC;IAAS,CAAE,GAAG,MAAMJ,cAAA,CAAe;MAC/C,GAAGE,IAAI;MACPG,mBAAA,EAAqB;MACrBC,KAAA,EAAO;QACL,IAAIJ,IAAA,CAAKI,KAAK,IAAI,CAAC,CAAC;QACpBC,KAAA,EAAO;MACT;MACAC,QAAA,EAAU;IACZ;IAEA,OAAOJ,SAAA;EACT,EAAE,OAAOK,KAAA,EAAO;IACd,IAAIA,KAAA,CAAMC,OAAO,KAAK,aAAa;MACjCX,QAAA;IACF;IACAY,OAAA,CAAQF,KAAK,CAACA,KAAA,EAAO;IAAA;EACvB;AACF","ignoreList":[]}