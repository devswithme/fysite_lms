{"version":3,"file":"index.js","names":["c","_c","useDndMonitor","getTranslation","useRouter","React","Fragment","DroppableBreadcrumb","ColoredFolderIcon","CurrentFolderActions","DragOverlaySelection","FilterFolderTypePill","FolderFileTable","ItemCardGrid","SortByPill","ToggleViewButtons","Gutter","ListHeader","ListCreateNewDocInFolderButton","NoListResults","SearchBar","useStepNav","useConfig","useEditDepth","FolderProvider","useFolder","usePreferences","useRouteCache","useRouteTransition","useTranslation","useWindowInfo","ListSelection","baseClass","DefaultBrowseByFolderView","activeCollectionFolderSlugs","allCollectionFolderSlugs","allowCreateCollectionSlugs","baseFolderPath","breadcrumbs","documents","folderFieldName","folderID","FolderResultsComponent","search","subfolders","restOfProps","_jsx","BrowseByFolderViewInContext","props","$","AfterFolderList","AfterFolderListTable","BeforeFolderList","BeforeFolderListTable","Description","disableBulkDelete","disableBulkEdit","folderAssignedCollections","viewPreference","router","getEntityConfig","i18n","t","drawerDepth","setStepNav","startRouteTransition","clearRouteCache","breakpoints","t0","s","smallBreak","setPreference","visibleCollectionSlugs","dragOverlayItem","folderCollectionConfig","folderType","getFolderRoute","getSelectedItems","moveToFolder","refineFolderData","selectedItemKeys","setIsDragging","activeView","setActiveView","useState","t1","locationLabel","length","labels","plural","name","folderName","searchPlaceholder","t2","event","over","data","current","type","itemsToMove","toFolderID","id","onDragEnd","totalDocsAndSubfolders","t3","listHeaderTitle","t4","acc","slug","index","array","collectionConfig","collectionSlug","toLowerCase","noResultsLabel","reduce","handleSetViewType","view","t5","t6","label","_jsxs","className","children","filter","Boolean","join","onClick","push","map","crumb","crumbIndex","useEffect","nonFolderCollectionSlugs","slug_0","t7","search_0","query","updateURL","t8","size","item","selectedCount","DndEventListener","Actions","AfterListHeaderContent","title","TitleActions","buttonLabel","collectionSlugs","Array","isArray","onCreateSuccess","slugPrefix","onSearchChange","searchQueryParam","_Fragment","items","subfolderCount","includes","singular","Message","onDragCancel","onDragStart"],"sources":["../../../src/views/BrowseByFolder/index.tsx"],"sourcesContent":["'use client'\n\nimport type { DragEndEvent } from '@dnd-kit/core'\nimport type { FolderListViewClientProps } from 'payload'\n\nimport { useDndMonitor } from '@dnd-kit/core'\nimport { getTranslation } from '@payloadcms/translations'\nimport { useRouter } from 'next/navigation.js'\nimport React, { Fragment } from 'react'\n\nimport { DroppableBreadcrumb } from '../../elements/FolderView/Breadcrumbs/index.js'\nimport { ColoredFolderIcon } from '../../elements/FolderView/ColoredFolderIcon/index.js'\nimport { CurrentFolderActions } from '../../elements/FolderView/CurrentFolderActions/index.js'\nimport { DragOverlaySelection } from '../../elements/FolderView/DragOverlaySelection/index.js'\nimport { FilterFolderTypePill } from '../../elements/FolderView/FilterFolderTypePill/index.js'\nimport { FolderFileTable } from '../../elements/FolderView/FolderFileTable/index.js'\nimport { ItemCardGrid } from '../../elements/FolderView/ItemCardGrid/index.js'\nimport { SortByPill } from '../../elements/FolderView/SortByPill/index.js'\nimport { ToggleViewButtons } from '../../elements/FolderView/ToggleViewButtons/index.js'\nimport { Gutter } from '../../elements/Gutter/index.js'\nimport { ListHeader } from '../../elements/ListHeader/index.js'\nimport { ListCreateNewDocInFolderButton } from '../../elements/ListHeader/TitleActions/index.js'\nimport { NoListResults } from '../../elements/NoListResults/index.js'\nimport { SearchBar } from '../../elements/SearchBar/index.js'\nimport { useStepNav } from '../../elements/StepNav/index.js'\nimport { useConfig } from '../../providers/Config/index.js'\nimport { useEditDepth } from '../../providers/EditDepth/index.js'\nimport { FolderProvider, useFolder } from '../../providers/Folders/index.js'\nimport { usePreferences } from '../../providers/Preferences/index.js'\nimport { useRouteCache } from '../../providers/RouteCache/index.js'\nimport { useRouteTransition } from '../../providers/RouteTransition/index.js'\nimport { useTranslation } from '../../providers/Translation/index.js'\nimport { useWindowInfo } from '../../providers/WindowInfo/index.js'\nimport { ListSelection } from '../CollectionFolder/ListSelection/index.js'\nimport './index.scss'\n\nconst baseClass = 'folder-list'\n\nexport function DefaultBrowseByFolderView({\n  activeCollectionFolderSlugs,\n  allCollectionFolderSlugs,\n  allowCreateCollectionSlugs,\n  baseFolderPath,\n  breadcrumbs,\n  documents,\n  folderFieldName,\n  folderID,\n  FolderResultsComponent,\n  search,\n  subfolders,\n  ...restOfProps\n}: FolderListViewClientProps) {\n  return (\n    <FolderProvider\n      activeCollectionFolderSlugs={activeCollectionFolderSlugs}\n      allCollectionFolderSlugs={allCollectionFolderSlugs}\n      allowCreateCollectionSlugs={allowCreateCollectionSlugs}\n      baseFolderPath={baseFolderPath}\n      breadcrumbs={breadcrumbs}\n      documents={documents}\n      folderFieldName={folderFieldName}\n      folderID={folderID}\n      FolderResultsComponent={FolderResultsComponent}\n      search={search}\n      subfolders={subfolders}\n    >\n      <BrowseByFolderViewInContext {...restOfProps} />\n    </FolderProvider>\n  )\n}\n\ntype BrowseByFolderViewInContextProps = Omit<\n  FolderListViewClientProps,\n  | 'activeCollectionFolderSlugs'\n  | 'allCollectionFolderSlugs'\n  | 'allowCreateCollectionSlugs'\n  | 'baseFolderPath'\n  | 'breadcrumbs'\n  | 'documents'\n  | 'folderFieldName'\n  | 'folderID'\n  | 'FolderResultsComponent'\n  | 'subfolders'\n>\n\nfunction BrowseByFolderViewInContext(props: BrowseByFolderViewInContextProps) {\n  const {\n    AfterFolderList,\n    AfterFolderListTable,\n    BeforeFolderList,\n    BeforeFolderListTable,\n    Description,\n    disableBulkDelete,\n    disableBulkEdit,\n    folderAssignedCollections,\n    viewPreference,\n  } = props\n\n  const router = useRouter()\n  const { getEntityConfig } = useConfig()\n  const { i18n, t } = useTranslation()\n  const drawerDepth = useEditDepth()\n  const { setStepNav } = useStepNav()\n  const { startRouteTransition } = useRouteTransition()\n  const { clearRouteCache } = useRouteCache()\n  const {\n    breakpoints: { s: smallBreak },\n  } = useWindowInfo()\n  const { setPreference } = usePreferences()\n  const {\n    activeCollectionFolderSlugs: visibleCollectionSlugs,\n    allowCreateCollectionSlugs,\n    breadcrumbs,\n    documents,\n    dragOverlayItem,\n    folderCollectionConfig,\n    folderID,\n    folderType,\n    getFolderRoute,\n    getSelectedItems,\n    moveToFolder,\n    refineFolderData,\n    search,\n    selectedItemKeys,\n    setIsDragging,\n    subfolders,\n  } = useFolder()\n\n  const [activeView, setActiveView] = React.useState<'grid' | 'list'>(viewPreference || 'grid')\n  const [searchPlaceholder] = React.useState(() => {\n    const locationLabel =\n      breadcrumbs.length === 0\n        ? getTranslation(folderCollectionConfig.labels?.plural, i18n)\n        : breadcrumbs[breadcrumbs.length - 1].name\n    return t('folder:searchByNameInFolder', {\n      folderName: locationLabel,\n    })\n  })\n\n  const onDragEnd = React.useCallback(\n    async (event: DragEndEvent) => {\n      if (!event.over) {\n        return\n      }\n\n      if (event.over.data.current.type === 'folder' && 'id' in event.over.data.current) {\n        await moveToFolder({\n          itemsToMove: getSelectedItems(),\n          toFolderID: event.over.data.current.id || null,\n        })\n        clearRouteCache()\n      }\n    },\n    [moveToFolder, getSelectedItems, clearRouteCache],\n  )\n\n  const totalDocsAndSubfolders = documents.length + subfolders.length\n  const listHeaderTitle = !breadcrumbs.length\n    ? t('folder:browseByFolder')\n    : breadcrumbs[breadcrumbs.length - 1].name\n  const noResultsLabel = visibleCollectionSlugs.reduce((acc, slug, index, array) => {\n    const collectionConfig = getEntityConfig({ collectionSlug: slug })\n    if (index === 0) {\n      return getTranslation(collectionConfig.labels?.plural, i18n)\n    }\n    if (index === array.length - 1) {\n      return `${acc} ${t('general:or').toLowerCase()} ${getTranslation(collectionConfig.labels?.plural, i18n)}`\n    }\n    return `${acc}, ${getTranslation(collectionConfig.labels?.plural, i18n)}`\n  }, '')\n\n  const handleSetViewType = React.useCallback(\n    (view: 'grid' | 'list') => {\n      void setPreference('browse-by-folder', {\n        viewPreference: view,\n      })\n      setActiveView(view)\n    },\n    [setPreference],\n  )\n\n  React.useEffect(() => {\n    if (!drawerDepth) {\n      setStepNav([\n        !breadcrumbs.length\n          ? {\n              label: (\n                <div className={`${baseClass}__step-nav-icon-label`} key=\"root\">\n                  <ColoredFolderIcon />\n                  {t('folder:browseByFolder')}\n                </div>\n              ),\n            }\n          : {\n              label: (\n                <DroppableBreadcrumb\n                  className={[\n                    `${baseClass}__step-nav-droppable`,\n                    `${baseClass}__step-nav-icon-label`,\n                  ]\n                    .filter(Boolean)\n                    .join(' ')}\n                  id={null}\n                  key=\"root\"\n                  onClick={() => {\n                    startRouteTransition(() => {\n                      router.push(getFolderRoute(null))\n                    })\n                  }}\n                >\n                  <ColoredFolderIcon />\n                  {t('folder:browseByFolder')}\n                </DroppableBreadcrumb>\n              ),\n            },\n        ...breadcrumbs.map((crumb, crumbIndex) => {\n          return {\n            label:\n              crumbIndex === breadcrumbs.length - 1 ? (\n                crumb.name\n              ) : (\n                <DroppableBreadcrumb\n                  className={`${baseClass}__step-nav-droppable`}\n                  id={crumb.id}\n                  key={crumb.id}\n                  onClick={() => {\n                    startRouteTransition(() => {\n                      router.push(getFolderRoute(crumb.id))\n                    })\n                  }}\n                >\n                  {crumb.name}\n                </DroppableBreadcrumb>\n              ),\n          }\n        }),\n      ])\n    }\n  }, [breadcrumbs, drawerDepth, getFolderRoute, router, setStepNav, startRouteTransition, t])\n\n  const nonFolderCollectionSlugs = allowCreateCollectionSlugs.filter(\n    (slug) => slug !== folderCollectionConfig.slug,\n  )\n\n  return (\n    <Fragment>\n      <DndEventListener onDragEnd={onDragEnd} setIsDragging={setIsDragging} />\n      <div className={`${baseClass} ${baseClass}--folders`}>\n        {BeforeFolderList}\n        <Gutter className={`${baseClass}__wrap`}>\n          <ListHeader\n            Actions={[\n              !smallBreak && (\n                <ListSelection\n                  disableBulkDelete={disableBulkDelete}\n                  disableBulkEdit={disableBulkEdit}\n                  folderAssignedCollections={folderAssignedCollections}\n                  key=\"list-selection\"\n                />\n              ),\n            ].filter(Boolean)}\n            AfterListHeaderContent={Description}\n            title={listHeaderTitle}\n            TitleActions={[\n              allowCreateCollectionSlugs.length && (\n                <ListCreateNewDocInFolderButton\n                  buttonLabel={t('general:createNew')}\n                  collectionSlugs={allowCreateCollectionSlugs}\n                  folderAssignedCollections={Array.isArray(folderType) ? folderType : []}\n                  key=\"create-new-button\"\n                  onCreateSuccess={clearRouteCache}\n                  slugPrefix=\"create-document--header-pill\"\n                />\n              ),\n            ].filter(Boolean)}\n          />\n          <SearchBar\n            Actions={[\n              <SortByPill key=\"sort-by-pill\" />,\n              folderID && <FilterFolderTypePill key=\"collection-type\" />,\n              <ToggleViewButtons\n                activeView={activeView}\n                key=\"toggle-view-buttons\"\n                setActiveView={handleSetViewType}\n              />,\n              <CurrentFolderActions key=\"current-folder-actions\" />,\n            ].filter(Boolean)}\n            label={searchPlaceholder}\n            onSearchChange={(search) => refineFolderData({ query: { search }, updateURL: true })}\n            searchQueryParam={search}\n          />\n          {BeforeFolderListTable}\n          {totalDocsAndSubfolders > 0 && (\n            <>\n              {activeView === 'grid' ? (\n                <div>\n                  {subfolders.length ? (\n                    <>\n                      <ItemCardGrid items={subfolders} title={'Folders'} type=\"folder\" />\n                    </>\n                  ) : null}\n\n                  {documents.length ? (\n                    <>\n                      <ItemCardGrid\n                        items={documents}\n                        subfolderCount={subfolders.length}\n                        title={'Documents'}\n                        type=\"file\"\n                      />\n                    </>\n                  ) : null}\n                </div>\n              ) : (\n                <FolderFileTable />\n              )}\n            </>\n          )}\n          {totalDocsAndSubfolders === 0 && (\n            <NoListResults\n              Actions={[\n                allowCreateCollectionSlugs.includes(folderCollectionConfig.slug) && (\n                  <ListCreateNewDocInFolderButton\n                    buttonLabel={`${t('general:create')} ${getTranslation(folderCollectionConfig.labels?.singular, i18n).toLowerCase()}`}\n                    collectionSlugs={[folderCollectionConfig.slug]}\n                    folderAssignedCollections={Array.isArray(folderType) ? folderType : []}\n                    key=\"create-folder\"\n                    onCreateSuccess={clearRouteCache}\n                    slugPrefix=\"create-folder--no-results\"\n                  />\n                ),\n                folderID && nonFolderCollectionSlugs.length > 0 && (\n                  <ListCreateNewDocInFolderButton\n                    buttonLabel={`${t('general:create')} ${t('general:document').toLowerCase()}`}\n                    collectionSlugs={nonFolderCollectionSlugs}\n                    folderAssignedCollections={Array.isArray(folderType) ? folderType : []}\n                    key=\"create-document\"\n                    onCreateSuccess={clearRouteCache}\n                    slugPrefix=\"create-document--no-results\"\n                  />\n                ),\n              ].filter(Boolean)}\n              Message={\n                <p>\n                  {i18n.t('general:noResults', {\n                    label: noResultsLabel,\n                  })}\n                </p>\n              }\n            />\n          )}\n          {AfterFolderListTable}\n        </Gutter>\n        {AfterFolderList}\n      </div>\n      {selectedItemKeys.size > 0 && dragOverlayItem && (\n        <DragOverlaySelection item={dragOverlayItem} selectedCount={selectedItemKeys.size} />\n      )}\n    </Fragment>\n  )\n}\nfunction DndEventListener({ onDragEnd, setIsDragging }) {\n  useDndMonitor({\n    onDragCancel() {\n      setIsDragging(false)\n    },\n    onDragEnd(event) {\n      setIsDragging(false)\n      onDragEnd(event)\n    },\n    onDragStart() {\n      setIsDragging(true)\n    },\n  })\n\n  return null\n}\n"],"mappings":"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","ignoreList":[]}