'use client';

import { c as _c } from "react/compiler-runtime";
import { getTranslation } from '@payloadcms/translations';
import { useConfig, useLocale, useStepNav, useTranslation } from '@payloadcms/ui';
import { fieldAffectsData, formatAdminURL } from 'payload/shared';
import { useEffect } from 'react';
export const SetStepNav = t0 => {
  const $ = _c(14);
  const {
    id,
    collectionConfig,
    globalConfig,
    isTrashed,
    versionToCreatedAtFormatted,
    versionToID,
    versionToUseAsTitle
  } = t0;
  const {
    config
  } = useConfig();
  const {
    setStepNav
  } = useStepNav();
  const {
    i18n,
    t
  } = useTranslation();
  const locale = useLocale();
  let t1;
  let t2;
  if ($[0] !== collectionConfig || $[1] !== config || $[2] !== globalConfig || $[3] !== i18n || $[4] !== id || $[5] !== isTrashed || $[6] !== locale || $[7] !== setStepNav || $[8] !== t || $[9] !== versionToCreatedAtFormatted || $[10] !== versionToID || $[11] !== versionToUseAsTitle) {
    t1 = () => {
      const {
        routes: t3
      } = config;
      const {
        admin: adminRoute
      } = t3;
      if (collectionConfig) {
        const collectionSlug = collectionConfig.slug;
        const useAsTitle = collectionConfig.admin?.useAsTitle || "id";
        const pluralLabel = collectionConfig.labels?.plural;
        let docLabel = `[${t("general:untitled")}]`;
        const fields = collectionConfig.fields;
        const titleField = fields.find(f => fieldAffectsData(f) && "name" in f && f.name === useAsTitle);
        if (titleField && versionToUseAsTitle) {
          docLabel = "localized" in titleField && titleField.localized ? versionToUseAsTitle?.[locale.code] || docLabel : versionToUseAsTitle;
        } else {
          if (useAsTitle === "id") {
            docLabel = versionToID;
          }
        }
        const docBasePath = isTrashed ? `/collections/${collectionSlug}/trash/${id}` : `/collections/${collectionSlug}/${id}`;
        const nav = [{
          label: getTranslation(pluralLabel, i18n),
          url: formatAdminURL({
            adminRoute,
            path: `/collections/${collectionSlug}`
          })
        }];
        if (isTrashed) {
          nav.push({
            label: t("general:trash"),
            url: formatAdminURL({
              adminRoute,
              path: `/collections/${collectionSlug}/trash`
            })
          });
        }
        nav.push({
          label: docLabel,
          url: formatAdminURL({
            adminRoute,
            path: docBasePath
          })
        }, {
          label: "Versions",
          url: formatAdminURL({
            adminRoute,
            path: `${docBasePath}/versions`
          })
        }, {
          label: versionToCreatedAtFormatted,
          url: undefined
        });
        setStepNav(nav);
        return;
      }
      if (globalConfig) {
        const globalSlug = globalConfig.slug;
        setStepNav([{
          label: globalConfig.label,
          url: formatAdminURL({
            adminRoute,
            path: `/globals/${globalSlug}`
          })
        }, {
          label: "Versions",
          url: formatAdminURL({
            adminRoute,
            path: `/globals/${globalSlug}/versions`
          })
        }, {
          label: versionToCreatedAtFormatted
        }]);
      }
    };
    t2 = [config, setStepNav, id, isTrashed, locale, t, i18n, collectionConfig, globalConfig, versionToUseAsTitle, versionToCreatedAtFormatted, versionToID];
    $[0] = collectionConfig;
    $[1] = config;
    $[2] = globalConfig;
    $[3] = i18n;
    $[4] = id;
    $[5] = isTrashed;
    $[6] = locale;
    $[7] = setStepNav;
    $[8] = t;
    $[9] = versionToCreatedAtFormatted;
    $[10] = versionToID;
    $[11] = versionToUseAsTitle;
    $[12] = t1;
    $[13] = t2;
  } else {
    t1 = $[12];
    t2 = $[13];
  }
  useEffect(t1, t2);
  return null;
};
//# sourceMappingURL=SetStepNav.js.map