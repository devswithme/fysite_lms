{"version":3,"file":"index.js","names":["DefaultListView","HydrateAuthProvider","ListQueryProvider","RenderServerComponent","renderFilters","renderTable","upsertPreferences","notFound","combineWhereConstraints","formatAdminURL","isNumber","mergeListSearchAndWhere","transformColumnsToPreferences","transformColumnsToSearchParams","React","Fragment","getDocumentPermissions","handleGroupBy","renderListViewSlots","resolveAllFilterOptions","renderListView","args","clientConfig","customCellProps","disableBulkDelete","disableBulkEdit","disableQueryPresets","drawerSlug","enableRowSelections","initPageResult","overrideEntityVisibility","params","query","queryFromArgs","searchParams","viewType","collectionConfig","slug","collectionSlug","locale","fullLocale","permissions","req","i18n","payload","config","queryFromReq","user","visibleEntities","collections","read","Error","columnsFromQuery","columns","queryByGroup","JSON","parse","collectionPreferences","key","value","groupBy","limit","Number","undefined","preset","sort","page","admin","pagination","defaultLimit","defaultSort","routes","adminRoute","includes","baseListFilter","whereCondition","search","where","trash","and","deletedAt","exists","queryPreset","queryPresetPermissions","whereWithMergedSearch","findByID","id","collection","depth","overrideAccess","find","c","data","then","docPermissions","err","logger","error","Table","columnState","draft","fallbackLocale","includeLockStatus","clientCollectionConfig","orderableFieldName","orderable","useAsTitle","renderedFilters","fields","importMap","resolvedFilterOptions","staticDescription","description","t","newDocumentURL","path","hasCreatePermission","create","hasDeletePermission","delete","notFoundDocId","serverProps","listPreferences","listSearchableFields","listViewSlots","clientProps","isInDrawer","Boolean","stringify","List","_jsxs","_jsx","modifySearchParams","Component","components","views","list","Fallback","ListView","RenderedList","message","console"],"sources":["../../../src/views/List/index.tsx"],"sourcesContent":["import type {\n  AdminViewServerProps,\n  CollectionPreferences,\n  Column,\n  ColumnPreference,\n  ListQuery,\n  ListViewClientProps,\n  ListViewServerPropsOnly,\n  PaginatedDocs,\n  QueryPreset,\n  SanitizedCollectionPermission,\n} from 'payload'\n\nimport { DefaultListView, HydrateAuthProvider, ListQueryProvider } from '@payloadcms/ui'\nimport { RenderServerComponent } from '@payloadcms/ui/elements/RenderServerComponent'\nimport { renderFilters, renderTable, upsertPreferences } from '@payloadcms/ui/rsc'\nimport { notFound } from 'next/navigation.js'\nimport {\n  combineWhereConstraints,\n  formatAdminURL,\n  isNumber,\n  mergeListSearchAndWhere,\n  transformColumnsToPreferences,\n  transformColumnsToSearchParams,\n} from 'payload/shared'\nimport React, { Fragment } from 'react'\n\nimport { getDocumentPermissions } from '../Document/getDocumentPermissions.js'\nimport { handleGroupBy } from './handleGroupBy.js'\nimport { renderListViewSlots } from './renderListViewSlots.js'\nimport { resolveAllFilterOptions } from './resolveAllFilterOptions.js'\n\ntype RenderListViewArgs = {\n  customCellProps?: Record<string, any>\n  disableBulkDelete?: boolean\n  disableBulkEdit?: boolean\n  disableQueryPresets?: boolean\n  drawerSlug?: string\n  enableRowSelections: boolean\n  overrideEntityVisibility?: boolean\n  query: ListQuery\n  redirectAfterDelete?: boolean\n  redirectAfterDuplicate?: boolean\n} & AdminViewServerProps\n\n/**\n * This function is responsible for rendering\n * the list view on the server for both:\n *  - default list view\n *  - list view within drawers\n */\nexport const renderListView = async (\n  args: RenderListViewArgs,\n): Promise<{\n  List: React.ReactNode\n}> => {\n  const {\n    clientConfig,\n    customCellProps,\n    disableBulkDelete,\n    disableBulkEdit,\n    disableQueryPresets,\n    drawerSlug,\n    enableRowSelections,\n    initPageResult,\n    overrideEntityVisibility,\n    params,\n    query: queryFromArgs,\n    searchParams,\n    viewType,\n  } = args\n\n  const {\n    collectionConfig,\n    collectionConfig: { slug: collectionSlug },\n    locale: fullLocale,\n    permissions,\n    req,\n    req: {\n      i18n,\n      payload,\n      payload: { config },\n      query: queryFromReq,\n      user,\n    },\n    visibleEntities,\n  } = initPageResult\n\n  if (!permissions?.collections?.[collectionSlug]?.read) {\n    throw new Error('not-found')\n  }\n\n  const query: ListQuery = queryFromArgs || queryFromReq\n\n  const columnsFromQuery: ColumnPreference[] = transformColumnsToPreferences(query?.columns)\n\n  query.queryByGroup =\n    query?.queryByGroup && typeof query.queryByGroup === 'string'\n      ? JSON.parse(query.queryByGroup)\n      : query?.queryByGroup\n\n  const collectionPreferences = await upsertPreferences<CollectionPreferences>({\n    key: `collection-${collectionSlug}`,\n    req,\n    value: {\n      columns: columnsFromQuery,\n      groupBy: query?.groupBy,\n      limit: isNumber(query?.limit) ? Number(query.limit) : undefined,\n      preset: query?.preset,\n      sort: query?.sort as string,\n    },\n  })\n\n  query.preset = collectionPreferences?.preset\n\n  query.page = isNumber(query?.page) ? Number(query.page) : 0\n\n  query.limit = collectionPreferences?.limit || collectionConfig.admin.pagination.defaultLimit\n\n  query.sort =\n    collectionPreferences?.sort ||\n    (typeof collectionConfig.defaultSort === 'string' ? collectionConfig.defaultSort : undefined)\n\n  query.groupBy = collectionPreferences?.groupBy\n\n  query.columns = transformColumnsToSearchParams(collectionPreferences?.columns || [])\n\n  const {\n    routes: { admin: adminRoute },\n  } = config\n\n  if (collectionConfig) {\n    if (!visibleEntities.collections.includes(collectionSlug) && !overrideEntityVisibility) {\n      throw new Error('not-found')\n    }\n\n    let baseListFilter = undefined\n\n    if (typeof collectionConfig.admin?.baseListFilter === 'function') {\n      baseListFilter = await collectionConfig.admin.baseListFilter({\n        limit: query.limit,\n        page: query.page,\n        req,\n        sort: query.sort,\n      })\n    }\n\n    let whereCondition = mergeListSearchAndWhere({\n      collectionConfig,\n      search: typeof query?.search === 'string' ? query.search : undefined,\n      where: combineWhereConstraints([query?.where, baseListFilter]),\n    })\n\n    if (query?.trash === true) {\n      whereCondition = {\n        and: [\n          whereCondition,\n          {\n            deletedAt: {\n              exists: true,\n            },\n          },\n        ],\n      }\n    }\n\n    let queryPreset: QueryPreset | undefined\n    let queryPresetPermissions: SanitizedCollectionPermission | undefined\n\n    let whereWithMergedSearch = mergeListSearchAndWhere({\n      collectionConfig,\n      search: typeof query?.search === 'string' ? query.search : undefined,\n      where: combineWhereConstraints([query?.where, baseListFilter]),\n    })\n\n    if (query?.trash === true) {\n      whereWithMergedSearch = {\n        and: [\n          whereWithMergedSearch,\n          {\n            deletedAt: {\n              exists: true,\n            },\n          },\n        ],\n      }\n    }\n\n    if (collectionPreferences?.preset) {\n      try {\n        queryPreset = (await payload.findByID({\n          id: collectionPreferences?.preset,\n          collection: 'payload-query-presets',\n          depth: 0,\n          overrideAccess: false,\n          user,\n        })) as QueryPreset\n\n        if (queryPreset) {\n          queryPresetPermissions = await getDocumentPermissions({\n            id: queryPreset.id,\n            collectionConfig: config.collections.find((c) => c.slug === 'payload-query-presets'),\n            data: queryPreset,\n            req,\n          })?.then(({ docPermissions }) => docPermissions)\n        }\n      } catch (err) {\n        req.payload.logger.error(`Error fetching query preset or preset permissions: ${err}`)\n      }\n    }\n\n    let data: PaginatedDocs | undefined\n    let Table: React.ReactNode | React.ReactNode[] = null\n    let columnState: Column[] = []\n\n    if (collectionConfig.admin.groupBy && query.groupBy) {\n      ;({ columnState, data, Table } = await handleGroupBy({\n        clientConfig,\n        collectionConfig,\n        collectionSlug,\n        columns: collectionPreferences?.columns,\n        customCellProps,\n        drawerSlug,\n        enableRowSelections,\n        query,\n        req,\n        user,\n        where: whereWithMergedSearch,\n      }))\n    } else {\n      data = await req.payload.find({\n        collection: collectionSlug,\n        depth: 0,\n        draft: true,\n        fallbackLocale: false,\n        includeLockStatus: true,\n        limit: query?.limit ? Number(query.limit) : undefined,\n        locale: req.locale,\n        overrideAccess: false,\n        page: query?.page ? Number(query.page) : undefined,\n        req,\n        sort: query?.sort,\n        trash: query?.trash === true,\n        user,\n        where: whereWithMergedSearch,\n      })\n      ;({ columnState, Table } = renderTable({\n        clientCollectionConfig: clientConfig.collections.find((c) => c.slug === collectionSlug),\n        collectionConfig,\n        columns: collectionPreferences?.columns,\n        customCellProps,\n        data,\n        drawerSlug,\n        enableRowSelections,\n        i18n: req.i18n,\n        orderableFieldName: collectionConfig.orderable === true ? '_order' : undefined,\n        payload: req.payload,\n        query,\n        useAsTitle: collectionConfig.admin.useAsTitle,\n        viewType,\n      }))\n    }\n\n    const renderedFilters = renderFilters(collectionConfig.fields, req.payload.importMap)\n\n    const resolvedFilterOptions = await resolveAllFilterOptions({\n      fields: collectionConfig.fields,\n      req,\n    })\n\n    const staticDescription =\n      typeof collectionConfig.admin.description === 'function'\n        ? collectionConfig.admin.description({ t: i18n.t })\n        : collectionConfig.admin.description\n\n    const newDocumentURL = formatAdminURL({\n      adminRoute,\n      path: `/collections/${collectionSlug}/create`,\n    })\n\n    const hasCreatePermission = permissions?.collections?.[collectionSlug]?.create\n    const hasDeletePermission = permissions?.collections?.[collectionSlug]?.delete\n\n    // Check if there's a notFound query parameter (document ID that wasn't found)\n    const notFoundDocId = typeof searchParams?.notFound === 'string' ? searchParams.notFound : null\n\n    const serverProps: ListViewServerPropsOnly = {\n      collectionConfig,\n      data,\n      i18n,\n      limit: query.limit,\n      listPreferences: collectionPreferences,\n      listSearchableFields: collectionConfig.admin.listSearchableFields,\n      locale: fullLocale,\n      params,\n      payload,\n      permissions,\n      searchParams,\n      user,\n    }\n\n    const listViewSlots = renderListViewSlots({\n      clientProps: {\n        collectionSlug,\n        hasCreatePermission,\n        hasDeletePermission,\n        newDocumentURL,\n      },\n      collectionConfig,\n      description: staticDescription,\n      notFoundDocId,\n      payload,\n      serverProps,\n    })\n\n    const isInDrawer = Boolean(drawerSlug)\n\n    // Needed to prevent: Only plain objects can be passed to Client Components from Server Components. Objects with toJSON methods are not supported. Convert it manually to a simple value before passing it to props.\n    // Is there a way to avoid this? The `where` object is already seemingly plain, but is not bc it originates from the params.\n    query.where = query?.where ? JSON.parse(JSON.stringify(query?.where || {})) : undefined\n\n    return {\n      List: (\n        <Fragment>\n          <HydrateAuthProvider permissions={permissions} />\n          <ListQueryProvider\n            collectionSlug={collectionSlug}\n            data={data}\n            modifySearchParams={!isInDrawer}\n            orderableFieldName={collectionConfig.orderable === true ? '_order' : undefined}\n            query={query}\n          >\n            {RenderServerComponent({\n              clientProps: {\n                ...listViewSlots,\n                collectionSlug,\n                columnState,\n                disableBulkDelete,\n                disableBulkEdit: collectionConfig.disableBulkEdit ?? disableBulkEdit,\n                disableQueryPresets,\n                enableRowSelections,\n                hasCreatePermission,\n                hasDeletePermission,\n                listPreferences: collectionPreferences,\n                newDocumentURL,\n                queryPreset,\n                queryPresetPermissions,\n                renderedFilters,\n                resolvedFilterOptions,\n                Table,\n                viewType,\n              } satisfies ListViewClientProps,\n              Component: collectionConfig?.admin?.components?.views?.list?.Component,\n              Fallback: DefaultListView,\n              importMap: payload.importMap,\n              serverProps,\n            })}\n          </ListQueryProvider>\n        </Fragment>\n      ),\n    }\n  }\n\n  throw new Error('not-found')\n}\n\nexport const ListView: React.FC<RenderListViewArgs> = async (args) => {\n  try {\n    const { List: RenderedList } = await renderListView({ ...args, enableRowSelections: true })\n    return RenderedList\n  } catch (error) {\n    if (error.message === 'not-found') {\n      notFound()\n    } else {\n      console.error(error) // eslint-disable-line no-console\n    }\n  }\n}\n"],"mappings":"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","ignoreList":[]}