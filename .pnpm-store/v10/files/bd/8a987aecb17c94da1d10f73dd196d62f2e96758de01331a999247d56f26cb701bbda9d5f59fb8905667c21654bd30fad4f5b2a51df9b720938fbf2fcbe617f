{"version":3,"file":"handleGroupBy.js","names":["renderTable","formatDate","flattenAllFields","handleGroupBy","clientConfig","collectionConfig","collectionSlug","columns","customCellProps","drawerSlug","enableRowSelections","query","req","user","where","whereWithMergedSearch","Table","columnState","dataByGroup","clientCollectionConfig","collections","find","c","slug","flattenedFields","fields","groupByFieldPath","groupBy","replace","groupByField","f","name","relationshipConfig","type","relationTo","undefined","populate","Array","isArray","forEach","rel","admin","useAsTitle","distinct","payload","findDistinct","collection","depth","field","limit","Number","locale","overrideAccess","page","sort","data","docs","values","map","Promise","all","distinctValue","i","potentiallyPopulatedRelationship","valueOrRelationshipID","id","groupData","draft","fallbackLocale","includeLockStatus","queryByGroup","equals","heading","i18n","t","date","String","pattern","dateFormat","length","newColumnState","NewTable","groupByValue","key","orderableFieldName","orderable"],"sources":["../../../src/views/List/handleGroupBy.ts"],"sourcesContent":["import type {\n  ClientConfig,\n  Column,\n  ListQuery,\n  PaginatedDocs,\n  PayloadRequest,\n  SanitizedCollectionConfig,\n  Where,\n} from 'payload'\n\nimport { renderTable } from '@payloadcms/ui/rsc'\nimport { formatDate } from '@payloadcms/ui/shared'\nimport { flattenAllFields } from 'payload'\n\nexport const handleGroupBy = async ({\n  clientConfig,\n  collectionConfig,\n  collectionSlug,\n  columns,\n  customCellProps,\n  drawerSlug,\n  enableRowSelections,\n  query,\n  req,\n  user,\n  where: whereWithMergedSearch,\n}: {\n  clientConfig: ClientConfig\n  collectionConfig: SanitizedCollectionConfig\n  collectionSlug: string\n  columns: any[]\n  customCellProps?: Record<string, any>\n  drawerSlug?: string\n  enableRowSelections?: boolean\n  query?: ListQuery\n  req: PayloadRequest\n  user: any\n  where: Where\n}): Promise<{\n  columnState: Column[]\n  data: PaginatedDocs\n  Table: null | React.ReactNode | React.ReactNode[]\n}> => {\n  let Table: React.ReactNode | React.ReactNode[] = null\n  let columnState: Column[]\n\n  const dataByGroup: Record<string, PaginatedDocs> = {}\n  const clientCollectionConfig = clientConfig.collections.find((c) => c.slug === collectionSlug)\n\n  // NOTE: is there a faster/better way to do this?\n  const flattenedFields = flattenAllFields({ fields: collectionConfig.fields })\n\n  const groupByFieldPath = query.groupBy.replace(/^-/, '')\n\n  const groupByField = flattenedFields.find((f) => f.name === groupByFieldPath)\n\n  const relationshipConfig =\n    groupByField?.type === 'relationship'\n      ? clientConfig.collections.find((c) => c.slug === groupByField.relationTo)\n      : undefined\n\n  let populate\n\n  if (groupByField?.type === 'relationship' && groupByField.relationTo) {\n    const relationTo =\n      typeof groupByField.relationTo === 'string'\n        ? [groupByField.relationTo]\n        : groupByField.relationTo\n\n    if (Array.isArray(relationTo)) {\n      relationTo.forEach((rel) => {\n        if (!populate) {\n          populate = {}\n        }\n        populate[rel] = { [relationshipConfig?.admin.useAsTitle || 'id']: true }\n      })\n    }\n  }\n\n  const distinct = await req.payload.findDistinct({\n    collection: collectionSlug,\n    depth: 1,\n    field: groupByFieldPath,\n    limit: query?.limit ? Number(query.limit) : undefined,\n    locale: req.locale,\n    overrideAccess: false,\n    page: query?.page ? Number(query.page) : undefined,\n    populate,\n    req,\n    sort: query?.groupBy,\n    where: whereWithMergedSearch,\n  })\n\n  const data = {\n    ...distinct,\n    docs: distinct.values?.map(() => ({})) || [],\n    values: undefined,\n  }\n\n  await Promise.all(\n    distinct.values.map(async (distinctValue, i) => {\n      const potentiallyPopulatedRelationship = distinctValue[groupByFieldPath]\n\n      const valueOrRelationshipID =\n        groupByField?.type === 'relationship' &&\n        potentiallyPopulatedRelationship &&\n        typeof potentiallyPopulatedRelationship === 'object' &&\n        'id' in potentiallyPopulatedRelationship\n          ? potentiallyPopulatedRelationship.id\n          : potentiallyPopulatedRelationship\n\n      const groupData = await req.payload.find({\n        collection: collectionSlug,\n        depth: 0,\n        draft: true,\n        fallbackLocale: false,\n        includeLockStatus: true,\n        limit: query?.queryByGroup?.[valueOrRelationshipID]?.limit\n          ? Number(query.queryByGroup[valueOrRelationshipID].limit)\n          : undefined,\n        locale: req.locale,\n        overrideAccess: false,\n        page: query?.queryByGroup?.[valueOrRelationshipID]?.page\n          ? Number(query.queryByGroup[valueOrRelationshipID].page)\n          : undefined,\n        req,\n        // Note: if we wanted to enable table-by-table sorting, we could use this:\n        // sort: query?.queryByGroup?.[valueOrRelationshipID]?.sort,\n        sort: query?.sort,\n        user,\n        where: {\n          ...(whereWithMergedSearch || {}),\n          [groupByFieldPath]: {\n            equals: valueOrRelationshipID,\n          },\n        },\n      })\n\n      let heading = valueOrRelationshipID || req.i18n.t('general:noValue')\n\n      if (\n        groupByField?.type === 'relationship' &&\n        typeof potentiallyPopulatedRelationship === 'object'\n      ) {\n        heading =\n          potentiallyPopulatedRelationship[relationshipConfig.admin.useAsTitle || 'id'] ||\n          valueOrRelationshipID\n      }\n\n      if (groupByField.type === 'date') {\n        heading = formatDate({\n          date: String(heading),\n          i18n: req.i18n,\n          pattern: clientConfig.admin.dateFormat,\n        })\n      }\n\n      if (groupData.docs && groupData.docs.length > 0) {\n        const { columnState: newColumnState, Table: NewTable } = renderTable({\n          clientCollectionConfig,\n          collectionConfig,\n          columns,\n          customCellProps,\n          data: groupData,\n          drawerSlug,\n          enableRowSelections,\n          groupByFieldPath,\n          groupByValue: valueOrRelationshipID,\n          heading,\n          i18n: req.i18n,\n          key: `table-${valueOrRelationshipID}`,\n          orderableFieldName: collectionConfig.orderable === true ? '_order' : undefined,\n          payload: req.payload,\n          query,\n          useAsTitle: collectionConfig.admin.useAsTitle,\n        })\n\n        // Only need to set `columnState` once, using the first table's column state\n        // This will avoid needing to generate column state explicitly for root context that wraps all tables\n        if (!columnState) {\n          columnState = newColumnState\n        }\n\n        if (!Table) {\n          Table = []\n        }\n\n        dataByGroup[valueOrRelationshipID] = groupData\n        ;(Table as Array<React.ReactNode>)[i] = NewTable\n      }\n    }),\n  )\n\n  return {\n    columnState,\n    data,\n    Table,\n  }\n}\n"],"mappings":"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","ignoreList":[]}