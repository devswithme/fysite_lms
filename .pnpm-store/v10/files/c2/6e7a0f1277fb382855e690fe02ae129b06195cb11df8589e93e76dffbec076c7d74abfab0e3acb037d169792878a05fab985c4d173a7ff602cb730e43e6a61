{"version":3,"file":"index.js","names":["c","_c","getTranslation","fieldAffectsData","fieldIsID","React","useConfig","useTranslation","formatAdminURL","getDisplayedFieldValue","Link","CodeCell","cellComponents","DefaultCell","props","$","cellData","className","classNameFromProps","collectionSlug","field","t0","link","onClick","onClickFromProps","rowData","viewType","admin","i18n","config","t1","getEntityConfig","routes","t2","adminRoute","t3","t4","Symbol","for","collectionConfig","classNameFromConfigContext","undefined","WrapElement","wrapElementProps","prefetch","href","slug","path","encodeURIComponent","id","type","_jsx","children","nowrap","displayedValue","DefaultCellComponent","CellComponent","isValidElement","upload","name","FileCellComponent","File","_jsxs","t","label","JSON","stringify","options","length","classes","Array","isArray","map","_temp","join","className_0","filter","Boolean","value"],"sources":["../../../../src/elements/Table/DefaultCell/index.tsx"],"sourcesContent":["'use client'\nimport type { DefaultCellComponentProps, UploadFieldClient } from 'payload'\n\nimport { getTranslation } from '@payloadcms/translations'\nimport { fieldAffectsData, fieldIsID } from 'payload/shared'\nimport React from 'react' // TODO: abstract this out to support all routers\n\nimport { useConfig } from '../../../providers/Config/index.js'\nimport { useTranslation } from '../../../providers/Translation/index.js'\nimport { formatAdminURL } from '../../../utilities/formatAdminURL.js'\nimport { getDisplayedFieldValue } from '../../../utilities/getDisplayedFieldValue.js'\nimport { Link } from '../../Link/index.js'\nimport { CodeCell } from './fields/Code/index.js'\nimport { cellComponents } from './fields/index.js'\n\nexport const DefaultCell: React.FC<DefaultCellComponentProps> = (props) => {\n  const {\n    cellData,\n    className: classNameFromProps,\n    collectionSlug,\n    field,\n    field: { admin },\n    link,\n    onClick: onClickFromProps,\n    rowData,\n    viewType,\n  } = props\n\n  const { i18n } = useTranslation()\n\n  const {\n    config: {\n      routes: { admin: adminRoute },\n    },\n    getEntityConfig,\n  } = useConfig()\n\n  const collectionConfig = getEntityConfig({ collectionSlug })\n\n  const classNameFromConfigContext = admin && 'className' in admin ? admin.className : undefined\n\n  const className =\n    classNameFromProps ||\n    (field.admin && 'className' in field.admin ? field.admin.className : null) ||\n    classNameFromConfigContext\n\n  const onClick = onClickFromProps\n\n  let WrapElement: React.ComponentType<any> | string = 'span'\n\n  const wrapElementProps: {\n    className?: string\n    href?: string\n    onClick?: () => void\n    prefetch?: false\n    type?: 'button'\n  } = {\n    className,\n  }\n\n  if (link) {\n    wrapElementProps.prefetch = false\n    WrapElement = Link\n    wrapElementProps.href = collectionConfig?.slug\n      ? formatAdminURL({\n          adminRoute,\n          path: `/collections/${collectionConfig?.slug}${viewType === 'trash' ? '/trash' : ''}/${encodeURIComponent(rowData.id)}`,\n        })\n      : ''\n  }\n\n  if (typeof onClick === 'function') {\n    WrapElement = 'button'\n    wrapElementProps.type = 'button'\n    wrapElementProps.onClick = () => {\n      onClick({\n        cellData,\n        collectionSlug: collectionConfig?.slug,\n        rowData,\n      })\n    }\n  }\n\n  if (fieldIsID(field)) {\n    return (\n      <WrapElement {...wrapElementProps}>\n        <CodeCell\n          cellData={`ID: ${cellData}`}\n          collectionConfig={collectionConfig}\n          collectionSlug={collectionSlug}\n          field={{\n            ...field,\n            type: 'code',\n          }}\n          nowrap\n          rowData={rowData}\n        />\n      </WrapElement>\n    )\n  }\n\n  const displayedValue = getDisplayedFieldValue(cellData, field, i18n)\n\n  const DefaultCellComponent: React.FC<DefaultCellComponentProps> =\n    typeof cellData !== 'undefined' && cellComponents[field.type]\n\n  let CellComponent: React.ReactNode = null\n\n  // Handle JSX labels before using DefaultCellComponent\n  if (React.isValidElement(displayedValue)) {\n    CellComponent = displayedValue\n  } else if (DefaultCellComponent) {\n    CellComponent = <DefaultCellComponent cellData={cellData} rowData={rowData} {...props} />\n  } else if (!DefaultCellComponent) {\n    // DefaultCellComponent does not exist for certain field types like `text`\n    if (\n      collectionConfig?.upload &&\n      fieldAffectsData(field) &&\n      field.name === 'filename' &&\n      field.type === 'text'\n    ) {\n      const FileCellComponent = cellComponents.File\n\n      CellComponent = (\n        <FileCellComponent\n          cellData={cellData}\n          rowData={rowData}\n          {...(props as DefaultCellComponentProps<UploadFieldClient>)}\n          collectionConfig={collectionConfig}\n          field={field}\n        />\n      )\n    } else {\n      return (\n        <WrapElement {...wrapElementProps}>\n          {(displayedValue === '' ||\n            typeof displayedValue === 'undefined' ||\n            displayedValue === null) &&\n            i18n.t('general:noLabel', {\n              label: getTranslation(('label' in field ? field.label : null) || 'data', i18n),\n            })}\n          {typeof displayedValue === 'string' && displayedValue}\n          {typeof displayedValue === 'number' && displayedValue}\n          {typeof displayedValue === 'object' &&\n            displayedValue !== null &&\n            JSON.stringify(displayedValue)}\n        </WrapElement>\n      )\n    }\n  }\n\n  if ((field.type === 'select' || field.type === 'radio') && field.options.length && cellData) {\n    const classes = Array.isArray(cellData)\n      ? cellData.map((value) => `selected--${value}`).join(' ')\n      : `selected--${cellData}`\n\n    const className = [wrapElementProps.className, classes].filter(Boolean).join(' ')\n\n    return (\n      <WrapElement {...wrapElementProps} className={className}>\n        {CellComponent}\n      </WrapElement>\n    )\n  }\n\n  return <WrapElement {...wrapElementProps}>{CellComponent}</WrapElement>\n}\n"],"mappings":"AAAA;;AAAA,SAAAA,CAAA,IAAAC,EAAA;;AAGA,SAASC,cAAc,QAAQ;AAC/B,SAASC,gBAAgB,EAAEC,SAAS,QAAQ;AAC5C,OAAOC,KAAA,MAAW,QAAO,CAAC;AAE1B,SAASC,SAAS,QAAQ;AAC1B,SAASC,cAAc,QAAQ;AAC/B,SAASC,cAAc,QAAQ;AAC/B,SAASC,sBAAsB,QAAQ;AACvC,SAASC,IAAI,QAAQ;AACrB,SAASC,QAAQ,QAAQ;AACzB,SAASC,cAAc,QAAQ;AAE/B,OAAO,MAAMC,WAAA,GAAmDC,KAAA;EAAA,MAAAC,CAAA,GAAAd,EAAA;EAC9D;IAAAe,QAAA;IAAAC,SAAA,EAAAC,kBAAA;IAAAC,cAAA;IAAAC,KAAA;IAAAA,KAAA,EAAAC,EAAA;IAAAC,IAAA;IAAAC,OAAA,EAAAC,gBAAA;IAAAC,OAAA;IAAAC;EAAA,IAUIZ,KAAA;EALK;IAAAa;EAAA,IAAAN,EAAS;EAOlB;IAAAO;EAAA,IAAiBrB,cAAA;EAEjB;IAAAsB,MAAA,EAAAC,EAAA;IAAAC;EAAA,IAKIzB,SAAA;EAJM;IAAA0B,MAAA,EAAAC;EAAA,IAAAH,EAEP;EADS;IAAAH,KAAA,EAAAO;EAAA,IAAAD,EAAqB;EAAA,IAAAE,EAAA;EAAA,IAAAC,EAAA;EAAA,IAAArB,CAAA,QAAAY,KAAA,IAAAZ,CAAA,QAAAmB,UAAA,IAAAnB,CAAA,QAAAC,QAAA,IAAAD,CAAA,QAAAG,kBAAA,IAAAH,CAAA,QAAAI,cAAA,IAAAJ,CAAA,QAAAK,KAAA,IAAAL,CAAA,QAAAgB,eAAA,IAAAhB,CAAA,QAAAa,IAAA,IAAAb,CAAA,QAAAO,IAAA,IAAAP,CAAA,QAAAS,gBAAA,IAAAT,CAAA,SAAAD,KAAA,IAAAC,CAAA,SAAAU,OAAA,IAAAV,CAAA,SAAAW,QAAA;IAqD7BU,EAAA,GAAAC,MAAA,CAAAC,GAAA,8B;;MAhDJ,MAAAC,gBAAA,GAAyBR,eAAA;QAAAZ;MAAA,CAAiC;MAE1D,MAAAqB,0BAAA,GAAmCb,KAAA,IAAS,eAAeA,KAAA,GAAQA,KAAA,CAAAV,SAAA,GAAAwB,SAAkB;MAErF,MAAAxB,SAAA,GACEC,kBAAA,KACCE,KAAA,CAAAO,KAAA,IAAe,eAAeP,KAAA,CAAAO,KAAW,GAAGP,KAAA,CAAAO,KAAA,CAAAV,SAAA,OAA2B,KACxEuB,0BAAA;MAEF,MAAAjB,OAAA,GAAgBC,gBAAA;MAEhB,IAAAkB,WAAA,GAAqD;MAErD,MAAAC,gBAAA;QAAA1B;MAAA;MAQA,IAEIK,IAAA;QACFqB,gBAAA,CAAAC,QAAA;QACAF,WAAA,CAAAA,CAAA,CAAAA,IAAA;QACAC,gBAAA,CAAAE,IAAA,GAAwBN,gBAAA,EAAAO,IAAA,GACpBtC,cAAA;UAAA0B,UAAA;UAAAa,IAAA,EAEQ,gBAAgBR,gBAAA,EAAAO,IAAA,GAAyBpB,QAAA,KAAa,UAAU,WAAW,MAAMsB,kBAAA,CAAmBvB,OAAA,CAAAwB,EAAU;QAAG,CACzH,IACA;MAAA;MAAA,IAGF,OAAO1B,OAAA,KAAY;QACrBmB,WAAA,CAAAA,CAAA,CAAcA,QAAA;QACdC,gBAAA,CAAAO,IAAA,GAAwB;QACxBP,gBAAA,CAAApB,OAAA;UACEA,OAAA;YAAAP,QAAA;YAAAG,cAAA,EAEkBoB,gBAAA,EAAAO,IAAA;YAAArB;UAAA,CAElB;QAAA;MAAA;MAAA,IAIArB,SAAA,CAAUgB,KAAA;QAEVgB,EAAA,GAAAe,IAAA,CAACT,WAAA;UAAA,GAAgBC,gBAAgB;UAAAS,QAAA,EAC/BD,IAAA,CAAAxC,QAAA;YAAAK,QAAA,EACY,OAAOA,QAAA,EAAU;YAAAuB,gBAAA;YAAApB,cAAA;YAAAC,KAAA;cAAA,GAItBA,KAAK;cAAA8B,IAAA,EACF;YAAA;YAAAG,MAAA;YAAA5B;UAAA,C;;;;MAShB,MAAA6B,cAAA,GAAuB7C,sBAAA,CAAuBO,QAAA,EAAUI,KAAA,EAAOQ,IAAA;MAE/D,MAAA2B,oBAAA,GACE,OAAOvC,QAAA,KAAa,eAAAJ,cAAA,CAA8BQ,KAAA,CAAA8B,IAAA,CAAW;MAE/D,IAAAM,aAAA;MAAqC,IAGjCnD,KAAA,CAAAoD,cAAA,CAAqBH,cAAA;QACvBE,aAAA,CAAAA,CAAA,CAAgBF,cAAA;MAAhB;QAAA,IACSC,oBAAA;UACTC,aAAA,CAAAA,CAAA,CAAgBA,KAACD,oBAAA;YAAAvC,QAAA;YAAAS,OAAA;YAAA,GAA+DX;UAAK,C;QAArF;UAAA,KACUyC,oBAAA;YAAA,IAGRhB,gBAAA,EAAAmB,MAAA,IACAvD,gBAAA,CAAiBiB,KAAA,KACjBA,KAAA,CAAAuC,IAAA,KAAe,cACfvC,KAAA,CAAA8B,IAAA,KAAe;cAEf,MAAAU,iBAAA,GAAAhD,cAAA,CAAAiD,IAAA;cAEAL,aAAA,CAAAA,CAAA,CACEA,KAACI,iBAAA;gBAAA5C,QAAA;gBAAAS,OAAA;gBAAA,GAGMX,KAAK;gBAAAyB,gBAAA;gBAAAnB;cAAA,C;YAJd;cAWEgB,EAAA,GAAA0B,KAAA,CAACpB,WAAA;gBAAA,GAAgBC,gBAAgB;gBAAAS,QAAA,GAC7B,CAAAE,cAAA,KAAmB,MACnB,OAAOA,cAAA,KAAmB,eAC1BA,cAAA,SAAsB,KACtB1B,IAAA,CAAAmC,CAAA,CAAO;kBAAAC,KAAA,EACE9D,cAAA,CAAe,CAAC,WAAWkB,KAAA,GAAQA,KAAA,CAAA4C,KAAA,OAAiB,KAAM,QAAQpC,IAAA;gBAAA,CAC3E,GACD,OAAO0B,cAAA,KAAmB,YAAYA,cAAA,EACtC,OAAOA,cAAA,KAAmB,YAAYA,cAAA,EACtC,OAAOA,cAAA,KAAmB,YACzBA,cAAA,SAAmB,IACnBW,IAAA,CAAAC,SAAA,CAAeZ,cAAA;cAAA,C;;;;;;UAMrB,CAAClC,KAAA,CAAA8B,IAAA,KAAe,YAAY9B,KAAA,CAAA8B,IAAA,KAAe,OAAM,KAAM9B,KAAA,CAAA+C,OAAA,CAAAC,MAAoB,IAAIpD,QAAA;QACjF,MAAAqD,OAAA,GAAgBC,KAAA,CAAAC,OAAA,CAAcvD,QAAA,IAC1BA,QAAA,CAAAwD,GAAA,CAAAC,KAA4C,EAAAC,IAAA,CAAO,OACnD,aAAa1D,QAAA,EAAU;QAE3B,MAAA2D,WAAA,GAAkB,CAAChC,gBAAA,CAAA1B,SAAA,EAA4BoD,OAAA,EAAAO,MAAA,CAAAC,OAAgB,EAAAH,IAAA,CAAc;QAG3EtC,EAAA,GAAAe,IAAA,CAACT,WAAA;UAAA,GAAgBC,gBAAgB;UAAA1B,SAAA,EAAaA,WAAA;UAAAmC,QAAA,EAC3CI;QAAA,C;;;MAKArB,EAAA,GAAAgB,IAAA,CAACT,WAAA;QAAA,GAAgBC,gBAAgB;QAAAS,QAAA,EAAGI;MAAA,C;;;;;;;;;;;;;;;;;;;;;;;;SAApCrB,E;CACT;AAvJgE,SAAAsC,MAAAK,KAAA;EAAA,OA0IhC,aAAaA,KAAA,EAAO;AAAA","ignoreList":[]}