{"version":3,"file":"index.js","names":["c","_c","useDndMonitor","getTranslation","useRouter","formatAdminURL","React","Fragment","DroppableBreadcrumb","ColoredFolderIcon","CurrentFolderActions","DragOverlaySelection","SortByPill","ToggleViewButtons","Gutter","ListHeader","ListBulkUploadButton","ListCreateNewDocInFolderButton","ByFolderPill","DefaultListPill","TrashPill","NoListResults","SearchBar","useStepNav","useConfig","useEditDepth","FolderProvider","useFolder","usePreferences","useRouteCache","useRouteTransition","useTranslation","useWindowInfo","ListSelection","baseClass","DefaultCollectionFolderView","allCollectionFolderSlugs","folderCollectionSlugs","allowCreateCollectionSlugs","baseFolderPath","breadcrumbs","documents","folderFieldName","folderID","FolderResultsComponent","search","sort","subfolders","restOfProps","_jsx","CollectionFolderViewInContext","props","$","AfterFolderList","AfterFolderListTable","BeforeFolderList","BeforeFolderListTable","collectionSlug","Description","disableBulkDelete","disableBulkEdit","viewPreference","config","getEntityConfig","i18n","t","drawerDepth","setStepNav","setPreference","dragOverlayItem","folderCollectionConfig","folderCollectionSlug","folderType","getSelectedItems","moveToFolder","refineFolderData","selectedItemKeys","setIsDragging","router","startRouteTransition","clearRouteCache","collectionConfig","labels","upload","isUploadCollection","Boolean","isBulkUploadEnabled","bulkUpload","breakpoints","t0","s","smallBreak","t1","event","over","data","current","type","itemsToMove","toFolderID","id","t2","error","console","onDragEnd","handleSetViewType","view","plural","t3","folders","routes","admin","useEffect","length","label","_jsxs","className","children","filter","join","onClick","push","adminRoute","path","slug","map","crumb","crumbIndex","name","totalDocsAndSubfolders","t4","search_0","query","updateURL","t5","size","item","selectedCount","DndEventListener","Actions","folderAssignedCollections","Array","isArray","viewType","trash","AfterListHeaderContent","title","TitleActions","buttonLabel","collectionSlugs","onCreateSuccess","slugPrefix","hasCreatePermission","includes","activeView","setActiveView","onSearchChange","searchQueryParam","singular","toLowerCase","Message","onDragCancel","onDragStart"],"sources":["../../../src/views/CollectionFolder/index.tsx"],"sourcesContent":["'use client'\n\nimport type { DragEndEvent } from '@dnd-kit/core'\nimport type { FolderListViewClientProps } from 'payload'\n\nimport { useDndMonitor } from '@dnd-kit/core'\nimport { getTranslation } from '@payloadcms/translations'\nimport { useRouter } from 'next/navigation.js'\nimport { formatAdminURL } from 'payload/shared'\nimport React, { Fragment } from 'react'\n\nimport { DroppableBreadcrumb } from '../../elements/FolderView/Breadcrumbs/index.js'\nimport { ColoredFolderIcon } from '../../elements/FolderView/ColoredFolderIcon/index.js'\nimport { CurrentFolderActions } from '../../elements/FolderView/CurrentFolderActions/index.js'\nimport { DragOverlaySelection } from '../../elements/FolderView/DragOverlaySelection/index.js'\nimport { SortByPill } from '../../elements/FolderView/SortByPill/index.js'\nimport { ToggleViewButtons } from '../../elements/FolderView/ToggleViewButtons/index.js'\nimport { Gutter } from '../../elements/Gutter/index.js'\nimport { ListHeader } from '../../elements/ListHeader/index.js'\nimport {\n  ListBulkUploadButton,\n  ListCreateNewDocInFolderButton,\n} from '../../elements/ListHeader/TitleActions/index.js'\nimport { ByFolderPill } from '../../elements/ListHeaderTabs/ByFolderPill.js'\nimport { DefaultListPill } from '../../elements/ListHeaderTabs/DefaultListPill.js'\nimport { TrashPill } from '../../elements/ListHeaderTabs/TrashPill.js'\nimport { NoListResults } from '../../elements/NoListResults/index.js'\nimport { SearchBar } from '../../elements/SearchBar/index.js'\nimport { useStepNav } from '../../elements/StepNav/index.js'\nimport { useConfig } from '../../providers/Config/index.js'\nimport { useEditDepth } from '../../providers/EditDepth/index.js'\nimport { FolderProvider, useFolder } from '../../providers/Folders/index.js'\nimport { usePreferences } from '../../providers/Preferences/index.js'\nimport { useRouteCache } from '../../providers/RouteCache/index.js'\nimport './index.scss'\nimport { useRouteTransition } from '../../providers/RouteTransition/index.js'\nimport { useTranslation } from '../../providers/Translation/index.js'\nimport { useWindowInfo } from '../../providers/WindowInfo/index.js'\nimport { ListSelection } from './ListSelection/index.js'\n\nconst baseClass = 'collection-folder-list'\n\nexport function DefaultCollectionFolderView({\n  allCollectionFolderSlugs: folderCollectionSlugs,\n  allowCreateCollectionSlugs,\n  baseFolderPath,\n  breadcrumbs,\n  documents,\n  folderFieldName,\n  folderID,\n  FolderResultsComponent,\n  search,\n  sort,\n  subfolders,\n  ...restOfProps\n}: FolderListViewClientProps) {\n  return (\n    <FolderProvider\n      allCollectionFolderSlugs={folderCollectionSlugs}\n      allowCreateCollectionSlugs={allowCreateCollectionSlugs}\n      baseFolderPath={baseFolderPath}\n      breadcrumbs={breadcrumbs}\n      documents={documents}\n      folderFieldName={folderFieldName}\n      folderID={folderID}\n      FolderResultsComponent={FolderResultsComponent}\n      search={search}\n      sort={sort}\n      subfolders={subfolders}\n    >\n      <CollectionFolderViewInContext {...restOfProps} />\n    </FolderProvider>\n  )\n}\n\ntype CollectionFolderViewInContextProps = Omit<\n  FolderListViewClientProps,\n  | 'allCollectionFolderSlugs'\n  | 'allowCreateCollectionSlugs'\n  | 'baseFolderPath'\n  | 'breadcrumbs'\n  | 'documents'\n  | 'folderFieldName'\n  | 'folderID'\n  | 'FolderResultsComponent'\n  | 'subfolders'\n>\n\nfunction CollectionFolderViewInContext(props: CollectionFolderViewInContextProps) {\n  const {\n    AfterFolderList,\n    AfterFolderListTable,\n    BeforeFolderList,\n    BeforeFolderListTable,\n    collectionSlug,\n    Description,\n    disableBulkDelete,\n    disableBulkEdit,\n    search,\n    viewPreference,\n  } = props\n\n  const { config, getEntityConfig } = useConfig()\n  const { i18n, t } = useTranslation()\n  const drawerDepth = useEditDepth()\n  const { setStepNav } = useStepNav()\n  const { setPreference } = usePreferences()\n  const {\n    allowCreateCollectionSlugs,\n    breadcrumbs,\n    documents,\n    dragOverlayItem,\n    folderCollectionConfig,\n    folderCollectionSlug,\n    FolderResultsComponent,\n    folderType,\n    getSelectedItems,\n    moveToFolder,\n    refineFolderData,\n    selectedItemKeys,\n    setIsDragging,\n    subfolders,\n  } = useFolder()\n\n  const router = useRouter()\n  const { startRouteTransition } = useRouteTransition()\n  const { clearRouteCache } = useRouteCache()\n\n  const collectionConfig = getEntityConfig({ collectionSlug })\n\n  const { labels, upload } = collectionConfig\n  const isUploadCollection = Boolean(upload)\n  const isBulkUploadEnabled = isUploadCollection && collectionConfig.upload.bulkUpload\n\n  const {\n    breakpoints: { s: smallBreak },\n  } = useWindowInfo()\n\n  const onDragEnd = React.useCallback(\n    async (event: DragEndEvent) => {\n      if (!event.over) {\n        return\n      }\n\n      if (event.over.data.current.type === 'folder' && 'id' in event.over.data.current) {\n        try {\n          await moveToFolder({\n            itemsToMove: getSelectedItems(),\n            toFolderID: event.over.data.current.id,\n          })\n        } catch (error) {\n          // eslint-disable-next-line no-console\n          console.error('Error moving items:', error)\n        }\n\n        clearRouteCache()\n      }\n    },\n    [moveToFolder, getSelectedItems, clearRouteCache],\n  )\n\n  const handleSetViewType = React.useCallback(\n    async (view: 'grid' | 'list') => {\n      await setPreference(`${collectionSlug}-collection-folder`, {\n        viewPreference: view,\n      })\n      clearRouteCache()\n    },\n    [collectionSlug, setPreference, clearRouteCache],\n  )\n\n  React.useEffect(() => {\n    if (!drawerDepth) {\n      setStepNav([\n        !breadcrumbs.length\n          ? {\n              label: (\n                <div className={`${baseClass}__step-nav-icon-label`} key=\"root\">\n                  <ColoredFolderIcon />\n                  {getTranslation(labels?.plural, i18n)}\n                </div>\n              ),\n            }\n          : {\n              label: (\n                <DroppableBreadcrumb\n                  className={[\n                    `${baseClass}__step-nav-droppable`,\n                    `${baseClass}__step-nav-icon-label`,\n                  ]\n                    .filter(Boolean)\n                    .join(' ')}\n                  id={null}\n                  key=\"root\"\n                  onClick={() => {\n                    startRouteTransition(() => {\n                      if (config.folders) {\n                        router.push(\n                          formatAdminURL({\n                            adminRoute: config.routes.admin,\n                            path: `/collections/${collectionSlug}/${config.folders.slug}`,\n                          }),\n                        )\n                      }\n                    })\n                  }}\n                >\n                  <ColoredFolderIcon />\n                  {getTranslation(labels?.plural, i18n)}\n                </DroppableBreadcrumb>\n              ),\n            },\n        ...breadcrumbs.map((crumb, crumbIndex) => {\n          return {\n            label:\n              crumbIndex === breadcrumbs.length - 1 ? (\n                crumb.name\n              ) : (\n                <DroppableBreadcrumb\n                  className={`${baseClass}__step-nav-droppable`}\n                  id={crumb.id}\n                  key={crumb.id}\n                  onClick={() => {\n                    startRouteTransition(() => {\n                      if (config.folders) {\n                        router.push(\n                          formatAdminURL({\n                            adminRoute: config.routes.admin,\n                            path: `/collections/${collectionSlug}/${config.folders.slug}/${crumb.id}`,\n                          }),\n                        )\n                      }\n                    })\n                  }}\n                >\n                  {crumb.name}\n                </DroppableBreadcrumb>\n              ),\n          }\n        }),\n      ])\n    }\n  }, [\n    breadcrumbs,\n    collectionSlug,\n    config.folders,\n    config.routes.admin,\n    drawerDepth,\n    i18n,\n    labels?.plural,\n    router,\n    setStepNav,\n    startRouteTransition,\n  ])\n\n  const totalDocsAndSubfolders = documents.length + subfolders.length\n\n  return (\n    <Fragment>\n      <DndEventListener onDragEnd={onDragEnd} setIsDragging={setIsDragging} />\n\n      <div className={`${baseClass} ${baseClass}--${collectionSlug}`}>\n        {BeforeFolderList}\n        <Gutter className={`${baseClass}__wrap`}>\n          <ListHeader\n            Actions={[\n              !smallBreak && (\n                <ListSelection\n                  disableBulkDelete={disableBulkDelete}\n                  disableBulkEdit={collectionConfig.disableBulkEdit ?? disableBulkEdit}\n                  folderAssignedCollections={\n                    Array.isArray(folderType) ? folderType : [collectionSlug]\n                  }\n                  key=\"list-selection\"\n                />\n              ),\n              config.folders && collectionConfig.folders && (\n                <Fragment key=\"list-header-folder-view-buttons\">\n                  <DefaultListPill\n                    collectionConfig={collectionConfig}\n                    key=\"list-header-default-button\"\n                    viewType=\"folders\"\n                  />\n                  <ByFolderPill\n                    collectionConfig={collectionConfig}\n                    folderCollectionSlug={folderCollectionSlug}\n                    key=\"list-header-by-folder-button\"\n                    viewType=\"folders\"\n                  />\n                </Fragment>\n              ),\n              collectionConfig.trash && (\n                <TrashPill\n                  collectionConfig={collectionConfig}\n                  key=\"list-header-trash-button\"\n                  viewType=\"folders\"\n                />\n              ),\n            ].filter(Boolean)}\n            AfterListHeaderContent={Description}\n            title={getTranslation(labels?.plural, i18n)}\n            TitleActions={[\n              allowCreateCollectionSlugs.length && (\n                <ListCreateNewDocInFolderButton\n                  buttonLabel={t('general:createNew')}\n                  collectionSlugs={allowCreateCollectionSlugs}\n                  folderAssignedCollections={\n                    Array.isArray(folderType) ? folderType : [collectionSlug]\n                  }\n                  key=\"create-new-button\"\n                  onCreateSuccess={clearRouteCache}\n                  slugPrefix=\"create-document--header-pill\"\n                />\n              ),\n              <ListBulkUploadButton\n                collectionSlug={collectionSlug}\n                hasCreatePermission={allowCreateCollectionSlugs.includes(collectionSlug)}\n                isBulkUploadEnabled={isBulkUploadEnabled}\n                key=\"bulk-upload-button\"\n              />,\n            ].filter(Boolean)}\n          />\n          <SearchBar\n            Actions={[\n              <SortByPill key=\"sort-by-pill\" />,\n              <ToggleViewButtons\n                activeView={viewPreference}\n                key=\"toggle-view-buttons\"\n                setActiveView={handleSetViewType}\n              />,\n              <CurrentFolderActions key=\"current-folder-actions\" />,\n            ].filter(Boolean)}\n            label={t('general:searchBy', {\n              label: t('general:name'),\n            })}\n            onSearchChange={(search) => refineFolderData({ query: { search }, updateURL: true })}\n            searchQueryParam={search}\n          />\n          {BeforeFolderListTable}\n          {totalDocsAndSubfolders > 0 && FolderResultsComponent}\n          {totalDocsAndSubfolders === 0 && (\n            <NoListResults\n              Actions={[\n                allowCreateCollectionSlugs.includes(folderCollectionSlug) && (\n                  <ListCreateNewDocInFolderButton\n                    buttonLabel={`${t('general:create')} ${getTranslation(folderCollectionConfig.labels?.singular, i18n).toLowerCase()}`}\n                    collectionSlugs={[folderCollectionConfig.slug]}\n                    folderAssignedCollections={\n                      Array.isArray(folderType) ? folderType : [collectionSlug]\n                    }\n                    key=\"create-folder\"\n                    onCreateSuccess={clearRouteCache}\n                    slugPrefix=\"create-folder--no-results\"\n                  />\n                ),\n                allowCreateCollectionSlugs.includes(collectionSlug) && (\n                  <ListCreateNewDocInFolderButton\n                    buttonLabel={`${t('general:create')} ${t('general:document').toLowerCase()}`}\n                    collectionSlugs={[collectionSlug]}\n                    folderAssignedCollections={\n                      Array.isArray(folderType) ? folderType : [collectionSlug]\n                    }\n                    key=\"create-document\"\n                    onCreateSuccess={clearRouteCache}\n                    slugPrefix=\"create-document--no-results\"\n                  />\n                ),\n              ].filter(Boolean)}\n              Message={\n                <p>\n                  {i18n.t('general:noResults', {\n                    label: `${getTranslation(labels?.plural, i18n)} ${t('general:or').toLowerCase()} ${getTranslation(\n                      folderCollectionConfig.labels?.plural,\n                      i18n,\n                    )}`,\n                  })}\n                </p>\n              }\n            />\n          )}\n          {AfterFolderListTable}\n        </Gutter>\n        {AfterFolderList}\n      </div>\n      {selectedItemKeys.size > 0 && dragOverlayItem && (\n        <DragOverlaySelection item={dragOverlayItem} selectedCount={selectedItemKeys.size} />\n      )}\n    </Fragment>\n  )\n}\n\nfunction DndEventListener({ onDragEnd, setIsDragging }) {\n  useDndMonitor({\n    onDragCancel() {\n      setIsDragging(false)\n    },\n    onDragEnd(event) {\n      setIsDragging(false)\n      onDragEnd(event)\n    },\n    onDragStart() {\n      setIsDragging(true)\n    },\n  })\n\n  return null\n}\n"],"mappings":"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","ignoreList":[]}