{"version":3,"file":"index.js","names":["c","_c","getTranslation","React","Fragment","useCallback","toast","Banner","Button","clipboardCopy","clipboardPaste","ClipboardAction","mergeFormStateFromClipboard","reduceFormStateByPath","DraggableSortableItem","DraggableSortable","ErrorPill","RenderCustomComponent","FieldDescription","FieldError","FieldLabel","useForm","useFormSubmitted","extractRowsAndCollapsedIDs","toggleAllRows","NullifyLocaleField","useField","withCondition","useConfig","useDocumentInfo","useLocale","useTranslation","scrollToID","fieldBaseClass","ArrayRow","baseClass","ArrayFieldComponent","props","$","field","t0","forceRender","t1","path","pathFromProps","permissions","readOnly","schemaPath","schemaPathFromProps","validate","name","type","admin","t2","fields","label","localized","maxRows","minRows","minRowsProp","required","t3","undefined","className","description","isSortable","t4","setDocFieldPreferences","addFieldRow","dispatchFields","getFields","moveFieldRow","removeFieldRow","replaceState","setModified","submitted","code","locale","i18n","t","config","t5","localization","t6","bb0","fallback","defaultLocale","editingDefaultLocale","t7","p","labels","plural","singular","getLabels","t8","value","options","memoizedValidate","t9","hasRows","potentiallyStalePath","customComponents","t10","disabled","errorPaths","rows","t11","showError","valid","value_0","t12","AfterInput","BeforeInput","Description","Error","Label","t13","t14","rowIndex","setTimeout","addRow","t15","rowIndex_0","duplicateRow","t16","rowIndex_1","removeRow","t17","moveFromIndex","moveToIndex","moveRow","t18","collapsed","collapsedIDs","updatedRows","toggleCollapseAll","t19","rowID","collapsed_0","collapsedIDs_0","updatedRows_0","setCollapse","t20","rowIndex_2","formState","clipboardResult","getDataToCopy","error","success","copyRow","t21","rowIndex_3","formState_0","pasteArgs","onPaste","dataFromClipboard","newState","schemaFields","clipboardResult_0","pasteRow","t22","dataFromClipboard_0","formState_1","newState_0","pasteField","t23","hasMaxRows","length","fieldErrorCount","fieldHasErrors","showRequired","showMinRows","t24","t25","filter","Boolean","t26","_jsx","CustomComponent","Fallback","t27","count","withMessage","_jsxs","join","id","replace","children","as","onClick","allowCopy","allowPaste","fieldValue","ids","map","_temp","onDragEnd","t28","moveFromIndex_0","moveToIndex_0","rowData","i","rowID_0","isLoading","rowPath","rowErrorCount","errorPath","startsWith","draggableSortableItemProps","CustomRowLabel","RowLabel","errorCount","parentPath","row","rowCount","buttonStyle","icon","iconPosition","iconStyle","ArrayField"],"sources":["../../../src/fields/Array/index.tsx"],"sourcesContent":["'use client'\nimport type {\n  ArrayFieldClientComponent,\n  ArrayFieldClientProps,\n  ArrayField as ArrayFieldType,\n} from 'payload'\n\nimport { getTranslation } from '@payloadcms/translations'\nimport React, { Fragment, useCallback } from 'react'\nimport { toast } from 'sonner'\n\nimport type { ClipboardPasteData } from '../../elements/ClipboardAction/types.js'\n\nimport { Banner } from '../../elements/Banner/index.js'\nimport { Button } from '../../elements/Button/index.js'\nimport { clipboardCopy, clipboardPaste } from '../../elements/ClipboardAction/clipboardUtilities.js'\nimport { ClipboardAction } from '../../elements/ClipboardAction/index.js'\nimport {\n  mergeFormStateFromClipboard,\n  reduceFormStateByPath,\n} from '../../elements/ClipboardAction/mergeFormStateFromClipboard.js'\nimport { DraggableSortableItem } from '../../elements/DraggableSortable/DraggableSortableItem/index.js'\nimport { DraggableSortable } from '../../elements/DraggableSortable/index.js'\nimport { ErrorPill } from '../../elements/ErrorPill/index.js'\nimport { RenderCustomComponent } from '../../elements/RenderCustomComponent/index.js'\nimport { FieldDescription } from '../../fields/FieldDescription/index.js'\nimport { FieldError } from '../../fields/FieldError/index.js'\nimport { FieldLabel } from '../../fields/FieldLabel/index.js'\nimport { useForm, useFormSubmitted } from '../../forms/Form/context.js'\nimport { extractRowsAndCollapsedIDs, toggleAllRows } from '../../forms/Form/rowHelpers.js'\nimport { NullifyLocaleField } from '../../forms/NullifyField/index.js'\nimport { useField } from '../../forms/useField/index.js'\nimport { withCondition } from '../../forms/withCondition/index.js'\nimport { useConfig } from '../../providers/Config/index.js'\nimport { useDocumentInfo } from '../../providers/DocumentInfo/index.js'\nimport { useLocale } from '../../providers/Locale/index.js'\nimport { useTranslation } from '../../providers/Translation/index.js'\nimport { scrollToID } from '../../utilities/scrollToID.js'\nimport { fieldBaseClass } from '../shared/index.js'\nimport { ArrayRow } from './ArrayRow.js'\nimport './index.scss'\n\nconst baseClass = 'array-field'\n\nexport const ArrayFieldComponent: ArrayFieldClientComponent = (props) => {\n  const {\n    field: {\n      name,\n      type,\n      admin: { className, description, isSortable = true } = {},\n      fields,\n      label,\n      localized,\n      maxRows,\n      minRows: minRowsProp,\n      required,\n    },\n    forceRender = false,\n    path: pathFromProps,\n    permissions,\n    readOnly,\n    schemaPath: schemaPathFromProps,\n    validate,\n  } = props\n\n  const schemaPath = schemaPathFromProps ?? name\n\n  const minRows = (minRowsProp ?? required) ? 1 : 0\n\n  const { setDocFieldPreferences } = useDocumentInfo()\n  const {\n    addFieldRow,\n    dispatchFields,\n    getFields,\n    moveFieldRow,\n    removeFieldRow,\n    replaceState,\n    setModified,\n  } = useForm()\n  const submitted = useFormSubmitted()\n  const { code: locale } = useLocale()\n  const { i18n, t } = useTranslation()\n\n  const {\n    config: { localization },\n  } = useConfig()\n\n  const editingDefaultLocale = (() => {\n    if (localization && localization.fallback) {\n      const defaultLocale = localization.defaultLocale\n      return locale === defaultLocale\n    }\n\n    return true\n  })()\n\n  // Handle labeling for Arrays, Global Arrays, and Blocks\n  const getLabels = (p: ArrayFieldClientProps): Partial<ArrayFieldType['labels']> => {\n    if ('labels' in p && p?.labels) {\n      return p.labels\n    }\n\n    if ('labels' in p.field && p.field.labels) {\n      return { plural: p.field.labels?.plural, singular: p.field.labels?.singular }\n    }\n\n    if ('label' in p.field && p.field.label) {\n      return { plural: undefined, singular: p.field.label }\n    }\n\n    return { plural: t('general:rows'), singular: t('general:row') }\n  }\n\n  const labels = getLabels(props)\n\n  const memoizedValidate = useCallback(\n    (value, options) => {\n      // alternative locales can be null\n      if (!editingDefaultLocale && value === null) {\n        return true\n      }\n\n      if (typeof validate === 'function') {\n        return validate(value, { ...options, maxRows, minRows, required })\n      }\n    },\n    [maxRows, minRows, required, validate, editingDefaultLocale],\n  )\n\n  const {\n    customComponents: { AfterInput, BeforeInput, Description, Error, Label } = {},\n    disabled,\n    errorPaths,\n    path,\n    rows = [],\n    showError,\n    valid,\n    value,\n  } = useField<number>({\n    hasRows: true,\n    potentiallyStalePath: pathFromProps,\n    validate: memoizedValidate,\n  })\n\n  const addRow = useCallback(\n    (rowIndex: number) => {\n      addFieldRow({\n        path,\n        rowIndex,\n        schemaPath,\n      })\n\n      setTimeout(() => {\n        scrollToID(`${path}-row-${rowIndex}`)\n      }, 0)\n    },\n    [addFieldRow, path, schemaPath],\n  )\n\n  const duplicateRow = useCallback(\n    (rowIndex: number) => {\n      dispatchFields({ type: 'DUPLICATE_ROW', path, rowIndex })\n\n      setModified(true)\n\n      setTimeout(() => {\n        scrollToID(`${path}-row-${rowIndex}`)\n      }, 0)\n    },\n    [dispatchFields, path, setModified],\n  )\n\n  const removeRow = useCallback(\n    (rowIndex: number) => {\n      removeFieldRow({ path, rowIndex })\n    },\n    [removeFieldRow, path],\n  )\n\n  const moveRow = useCallback(\n    (moveFromIndex: number, moveToIndex: number) => {\n      moveFieldRow({\n        moveFromIndex,\n        moveToIndex,\n        path,\n      })\n    },\n    [path, moveFieldRow],\n  )\n\n  const toggleCollapseAll = useCallback(\n    (collapsed: boolean) => {\n      const { collapsedIDs, updatedRows } = toggleAllRows({\n        collapsed,\n        rows,\n      })\n      setDocFieldPreferences(path, { collapsed: collapsedIDs })\n      dispatchFields({ type: 'SET_ALL_ROWS_COLLAPSED', path, updatedRows })\n    },\n    [dispatchFields, path, rows, setDocFieldPreferences],\n  )\n\n  const setCollapse = useCallback(\n    (rowID: string, collapsed: boolean) => {\n      const { collapsedIDs, updatedRows } = extractRowsAndCollapsedIDs({\n        collapsed,\n        rowID,\n        rows,\n      })\n\n      dispatchFields({ type: 'SET_ROW_COLLAPSED', path, updatedRows })\n      setDocFieldPreferences(path, { collapsed: collapsedIDs })\n    },\n    [dispatchFields, path, rows, setDocFieldPreferences],\n  )\n\n  const copyRow = useCallback(\n    (rowIndex: number) => {\n      const formState = { ...getFields() }\n      const clipboardResult = clipboardCopy({\n        type,\n        fields,\n        getDataToCopy: () =>\n          reduceFormStateByPath({\n            formState,\n            path,\n            rowIndex,\n          }),\n        path,\n        rowIndex,\n        t,\n      })\n\n      if (typeof clipboardResult === 'string') {\n        toast.error(clipboardResult)\n      } else {\n        toast.success(t('general:copied'))\n      }\n    },\n    [fields, getFields, path, t, type],\n  )\n\n  const pasteRow = useCallback(\n    (rowIndex: number) => {\n      const formState = { ...getFields() }\n      const pasteArgs = {\n        onPaste: (dataFromClipboard: ClipboardPasteData) => {\n          const newState = mergeFormStateFromClipboard({\n            dataFromClipboard,\n            formState,\n            path,\n            rowIndex,\n          })\n          replaceState(newState)\n          setModified(true)\n        },\n        path,\n        schemaFields: fields,\n        t,\n      }\n\n      const clipboardResult = clipboardPaste(pasteArgs)\n\n      if (typeof clipboardResult === 'string') {\n        toast.error(clipboardResult)\n      }\n    },\n    [fields, getFields, path, replaceState, setModified, t],\n  )\n\n  const pasteField = useCallback(\n    (dataFromClipboard: ClipboardPasteData) => {\n      const formState = { ...getFields() }\n      const newState = mergeFormStateFromClipboard({\n        dataFromClipboard,\n        formState,\n        path,\n      })\n      replaceState(newState)\n      setModified(true)\n    },\n    [getFields, path, replaceState, setModified],\n  )\n\n  const getDataToCopy = useCallback(\n    () =>\n      reduceFormStateByPath({\n        formState: { ...getFields() },\n        path,\n      }),\n    [getFields, path],\n  )\n\n  const hasMaxRows = maxRows && rows.length >= maxRows\n\n  const fieldErrorCount = errorPaths.length\n  const fieldHasErrors = submitted && errorPaths.length > 0\n\n  const showRequired = (readOnly || disabled) && rows.length === 0\n  const showMinRows = (rows.length && rows.length < minRows) || (required && rows.length === 0)\n\n  return (\n    <div\n      className={[\n        fieldBaseClass,\n        baseClass,\n        className,\n        fieldHasErrors ? `${baseClass}--has-error` : `${baseClass}--has-no-error`,\n      ]\n        .filter(Boolean)\n        .join(' ')}\n      id={`field-${path.replace(/\\./g, '__')}`}\n    >\n      {showError && (\n        <RenderCustomComponent\n          CustomComponent={Error}\n          Fallback={<FieldError path={path} showError={showError} />}\n        />\n      )}\n      <header className={`${baseClass}__header`}>\n        <div className={`${baseClass}__header-wrap`}>\n          <div className={`${baseClass}__header-content`}>\n            <h3 className={`${baseClass}__title`}>\n              <RenderCustomComponent\n                CustomComponent={Label}\n                Fallback={\n                  <FieldLabel\n                    as=\"span\"\n                    label={label}\n                    localized={localized}\n                    path={path}\n                    required={required}\n                  />\n                }\n              />\n            </h3>\n            {fieldHasErrors && fieldErrorCount > 0 && (\n              <ErrorPill count={fieldErrorCount} i18n={i18n} withMessage />\n            )}\n          </div>\n          <ul className={`${baseClass}__header-actions`}>\n            {rows?.length > 0 && (\n              <Fragment>\n                <li>\n                  <button\n                    className={`${baseClass}__header-action`}\n                    onClick={() => toggleCollapseAll(true)}\n                    type=\"button\"\n                  >\n                    {t('fields:collapseAll')}\n                  </button>\n                </li>\n                <li>\n                  <button\n                    className={`${baseClass}__header-action`}\n                    onClick={() => toggleCollapseAll(false)}\n                    type=\"button\"\n                  >\n                    {t('fields:showAll')}\n                  </button>\n                </li>\n              </Fragment>\n            )}\n            <li>\n              <ClipboardAction\n                allowCopy={rows?.length > 0}\n                allowPaste={!readOnly}\n                className={`${baseClass}__header-action`}\n                disabled={disabled}\n                fields={fields}\n                getDataToCopy={getDataToCopy}\n                onPaste={pasteField}\n                path={path}\n                type={type}\n              />\n            </li>\n          </ul>\n        </div>\n        <RenderCustomComponent\n          CustomComponent={Description}\n          Fallback={<FieldDescription description={description} path={path} />}\n        />\n      </header>\n      <NullifyLocaleField fieldValue={value} localized={localized} path={path} />\n      {BeforeInput}\n      {(rows?.length > 0 || (!valid && (showRequired || showMinRows))) && (\n        <DraggableSortable\n          className={`${baseClass}__draggable-rows`}\n          ids={rows.map((row) => row.id)}\n          onDragEnd={({ moveFromIndex, moveToIndex }) => moveRow(moveFromIndex, moveToIndex)}\n        >\n          {rows.map((rowData, i) => {\n            const { id: rowID, isLoading } = rowData\n\n            const rowPath = `${path}.${i}`\n\n            const rowErrorCount = errorPaths?.filter((errorPath) =>\n              errorPath.startsWith(rowPath + '.'),\n            ).length\n\n            return (\n              <DraggableSortableItem\n                disabled={readOnly || disabled || !isSortable}\n                id={rowID}\n                key={rowID}\n              >\n                {(draggableSortableItemProps) => (\n                  <ArrayRow\n                    {...draggableSortableItemProps}\n                    addRow={addRow}\n                    copyRow={copyRow}\n                    CustomRowLabel={rows?.[i]?.customComponents?.RowLabel}\n                    duplicateRow={duplicateRow}\n                    errorCount={rowErrorCount}\n                    fields={fields}\n                    forceRender={forceRender}\n                    hasMaxRows={hasMaxRows}\n                    isLoading={isLoading}\n                    isSortable={isSortable}\n                    labels={labels}\n                    moveRow={moveRow}\n                    parentPath={path}\n                    pasteRow={pasteRow}\n                    path={rowPath}\n                    permissions={permissions}\n                    readOnly={readOnly || disabled}\n                    removeRow={removeRow}\n                    row={rowData}\n                    rowCount={rows?.length}\n                    rowIndex={i}\n                    schemaPath={schemaPath}\n                    setCollapse={setCollapse}\n                  />\n                )}\n              </DraggableSortableItem>\n            )\n          })}\n          {!valid && (\n            <React.Fragment>\n              {showRequired && (\n                <Banner>\n                  {t('validation:fieldHasNo', { label: getTranslation(labels.plural, i18n) })}\n                </Banner>\n              )}\n              {showMinRows && (\n                <Banner type=\"error\">\n                  {t('validation:requiresAtLeast', {\n                    count: minRows,\n                    label:\n                      getTranslation(minRows > 1 ? labels.plural : labels.singular, i18n) ||\n                      t(minRows > 1 ? 'general:rows' : 'general:row'),\n                  })}\n                </Banner>\n              )}\n            </React.Fragment>\n          )}\n        </DraggableSortable>\n      )}\n      {!hasMaxRows && !readOnly && (\n        <Button\n          buttonStyle=\"icon-label\"\n          className={`${baseClass}__add-row`}\n          disabled={disabled}\n          icon=\"plus\"\n          iconPosition=\"left\"\n          iconStyle=\"with-border\"\n          onClick={() => {\n            void addRow(value || 0)\n          }}\n        >\n          {t('fields:addLabel', { label: getTranslation(labels.singular, i18n) })}\n        </Button>\n      )}\n      {AfterInput}\n    </div>\n  )\n}\n\nexport const ArrayField = withCondition(ArrayFieldComponent)\n"],"mappings":"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","ignoreList":[]}