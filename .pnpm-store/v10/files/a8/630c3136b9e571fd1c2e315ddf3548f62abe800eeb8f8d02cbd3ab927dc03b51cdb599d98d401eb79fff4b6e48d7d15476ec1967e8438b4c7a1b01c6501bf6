{"version":3,"file":"index.js","names":["getTranslation","React","Fragment","useCallback","useMemo","toast","Banner","Button","clipboardCopy","clipboardPaste","ClipboardAction","mergeFormStateFromClipboard","reduceFormStateByPath","DraggableSortableItem","DraggableSortable","DrawerToggler","useDrawerSlug","ErrorPill","RenderCustomComponent","useForm","useFormSubmitted","extractRowsAndCollapsedIDs","toggleAllRows","NullifyLocaleField","useField","withCondition","useConfig","useDocumentInfo","useLocale","useTranslation","scrollToID","FieldDescription","FieldError","FieldLabel","fieldBaseClass","BlockRow","BlocksDrawer","baseClass","BlocksFieldComponent","props","i18n","t","field","name","type","admin","className","description","isSortable","blockReferences","blocks","label","labels","labelsFromProps","localized","maxRows","minRows","minRowsProp","required","path","pathFromProps","permissions","readOnly","schemaPath","schemaPathFromProps","validate","setDocFieldPreferences","addFieldRow","dispatchFields","getFields","moveFieldRow","removeFieldRow","replaceState","setModified","code","locale","config","localization","drawerSlug","submitted","plural","singular","editingDefaultLocale","fallback","defaultLocale","clientBlocks","resolvedBlocks","blockReference","block","blocksMap","push","memoizedValidate","value","options","customComponents","AfterInput","BeforeInput","Description","Error","Label","disabled","errorPaths","rows","showError","valid","hasRows","potentiallyStalePath","addRow","rowIndex","blockType","setTimeout","duplicateRow","removeRow","moveRow","moveFromIndex","moveToIndex","toggleCollapseAll","collapsed","collapsedIDs","updatedRows","setCollapse","rowID","copyRow","clipboardResult","getDataToCopy","formState","error","success","pasteRow","pasteArgs","onPaste","dataFromClipboard","newState","schemaBlocks","pasteBlocks","hasMaxRows","length","fieldErrorCount","fieldHasErrors","showMinRows","showRequired","_jsxs","filter","Boolean","join","id","replace","_jsx","CustomComponent","Fallback","as","count","withMessage","onClick","allowCopy","allowPaste","fieldValue","ids","map","row","onDragEnd","i","isLoading","blockConfig","find","slug","rowPath","rowErrorCount","errorPath","startsWith","draggableSortableItemProps","errorCount","fields","RowLabel","parentPath","rowCount","buttonStyle","el","icon","iconPosition","iconStyle","addRowIndex","BlocksField"],"sources":["../../../src/fields/Blocks/index.tsx"],"sourcesContent":["'use client'\nimport type { BlocksFieldClientComponent, ClientBlock } from 'payload'\n\nimport { getTranslation } from '@payloadcms/translations'\nimport React, { Fragment, useCallback, useMemo } from 'react'\nimport { toast } from 'sonner'\n\nimport type { ClipboardPasteData } from '../../elements/ClipboardAction/types.js'\n\nimport { Banner } from '../../elements/Banner/index.js'\nimport { Button } from '../../elements/Button/index.js'\nimport { clipboardCopy, clipboardPaste } from '../../elements/ClipboardAction/clipboardUtilities.js'\nimport { ClipboardAction } from '../../elements/ClipboardAction/index.js'\nimport {\n  mergeFormStateFromClipboard,\n  reduceFormStateByPath,\n} from '../../elements/ClipboardAction/mergeFormStateFromClipboard.js'\nimport { DraggableSortableItem } from '../../elements/DraggableSortable/DraggableSortableItem/index.js'\nimport { DraggableSortable } from '../../elements/DraggableSortable/index.js'\nimport { DrawerToggler } from '../../elements/Drawer/index.js'\nimport { useDrawerSlug } from '../../elements/Drawer/useDrawerSlug.js'\nimport { ErrorPill } from '../../elements/ErrorPill/index.js'\nimport { RenderCustomComponent } from '../../elements/RenderCustomComponent/index.js'\nimport { useForm, useFormSubmitted } from '../../forms/Form/context.js'\nimport { extractRowsAndCollapsedIDs, toggleAllRows } from '../../forms/Form/rowHelpers.js'\nimport { NullifyLocaleField } from '../../forms/NullifyField/index.js'\nimport { useField } from '../../forms/useField/index.js'\nimport { withCondition } from '../../forms/withCondition/index.js'\nimport { useConfig } from '../../providers/Config/index.js'\nimport { useDocumentInfo } from '../../providers/DocumentInfo/index.js'\nimport { useLocale } from '../../providers/Locale/index.js'\nimport { useTranslation } from '../../providers/Translation/index.js'\nimport { scrollToID } from '../../utilities/scrollToID.js'\nimport './index.scss'\nimport { FieldDescription } from '../FieldDescription/index.js'\nimport { FieldError } from '../FieldError/index.js'\nimport { FieldLabel } from '../FieldLabel/index.js'\nimport { fieldBaseClass } from '../shared/index.js'\nimport { BlockRow } from './BlockRow.js'\nimport { BlocksDrawer } from './BlocksDrawer/index.js'\n\nconst baseClass = 'blocks-field'\n\nconst BlocksFieldComponent: BlocksFieldClientComponent = (props) => {\n  const { i18n, t } = useTranslation()\n\n  const {\n    field: {\n      name,\n      type,\n      admin: { className, description, isSortable = true } = {},\n      blockReferences,\n      blocks,\n      label,\n      labels: labelsFromProps,\n      localized,\n      maxRows,\n      minRows: minRowsProp,\n      required,\n    },\n    path: pathFromProps,\n    permissions,\n    readOnly,\n    schemaPath: schemaPathFromProps,\n    validate,\n  } = props\n\n  const schemaPath = schemaPathFromProps ?? name\n\n  const minRows = (minRowsProp ?? required) ? 1 : 0\n\n  const { setDocFieldPreferences } = useDocumentInfo()\n  const {\n    addFieldRow,\n    dispatchFields,\n    getFields,\n    moveFieldRow,\n    removeFieldRow,\n    replaceState,\n    setModified,\n  } = useForm()\n  const { code: locale } = useLocale()\n  const {\n    config: { localization },\n    config,\n  } = useConfig()\n  const drawerSlug = useDrawerSlug('blocks-drawer')\n  const submitted = useFormSubmitted()\n\n  const labels = {\n    plural: t('fields:blocks'),\n    singular: t('fields:block'),\n    ...labelsFromProps,\n  }\n\n  const editingDefaultLocale = (() => {\n    if (localization && localization.fallback) {\n      const defaultLocale = localization.defaultLocale\n      return locale === defaultLocale\n    }\n\n    return true\n  })()\n\n  const clientBlocks = useMemo(() => {\n    if (!blockReferences) {\n      return blocks\n    }\n\n    const resolvedBlocks: ClientBlock[] = []\n    for (const blockReference of blockReferences) {\n      const block =\n        typeof blockReference === 'string' ? config.blocksMap[blockReference] : blockReference\n      if (block) {\n        resolvedBlocks.push(block)\n      }\n    }\n\n    return resolvedBlocks\n  }, [blockReferences, blocks, config.blocksMap])\n\n  const memoizedValidate = useCallback(\n    (value, options) => {\n      // alternative locales can be null\n      if (!editingDefaultLocale && value === null) {\n        return true\n      }\n      if (typeof validate === 'function') {\n        return validate(value, { ...options, maxRows, minRows, required })\n      }\n    },\n    [maxRows, minRows, required, validate, editingDefaultLocale],\n  )\n\n  const {\n    customComponents: { AfterInput, BeforeInput, Description, Error, Label } = {},\n    disabled,\n    errorPaths,\n    path,\n    rows = [],\n    showError,\n    valid,\n    value,\n  } = useField<number>({\n    hasRows: true,\n    potentiallyStalePath: pathFromProps,\n    validate: memoizedValidate,\n  })\n\n  const addRow = useCallback(\n    (rowIndex: number, blockType: string) => {\n      addFieldRow({\n        blockType,\n        path,\n        rowIndex,\n        schemaPath,\n      })\n\n      setTimeout(() => {\n        scrollToID(`${path}-row-${rowIndex + 1}`)\n      }, 0)\n    },\n    [addFieldRow, path, schemaPath],\n  )\n\n  const duplicateRow = useCallback(\n    (rowIndex: number) => {\n      dispatchFields({ type: 'DUPLICATE_ROW', path, rowIndex })\n      setModified(true)\n\n      setTimeout(() => {\n        scrollToID(`${path}-row-${rowIndex + 1}`)\n      }, 0)\n    },\n    [dispatchFields, path, setModified],\n  )\n\n  const removeRow = useCallback(\n    (rowIndex: number) => {\n      removeFieldRow({\n        path,\n        rowIndex,\n      })\n    },\n    [path, removeFieldRow],\n  )\n\n  const moveRow = useCallback(\n    (moveFromIndex: number, moveToIndex: number) => {\n      moveFieldRow({ moveFromIndex, moveToIndex, path })\n    },\n    [moveFieldRow, path],\n  )\n\n  const toggleCollapseAll = useCallback(\n    (collapsed: boolean) => {\n      const { collapsedIDs, updatedRows } = toggleAllRows({\n        collapsed,\n        rows,\n      })\n\n      dispatchFields({ type: 'SET_ALL_ROWS_COLLAPSED', path, updatedRows })\n      setDocFieldPreferences(path, { collapsed: collapsedIDs })\n    },\n    [dispatchFields, path, rows, setDocFieldPreferences],\n  )\n\n  const setCollapse = useCallback(\n    (rowID: string, collapsed: boolean) => {\n      const { collapsedIDs, updatedRows } = extractRowsAndCollapsedIDs({\n        collapsed,\n        rowID,\n        rows,\n      })\n\n      dispatchFields({ type: 'SET_ROW_COLLAPSED', path, updatedRows })\n      setDocFieldPreferences(path, { collapsed: collapsedIDs })\n    },\n    [dispatchFields, path, rows, setDocFieldPreferences],\n  )\n\n  const copyRow = useCallback(\n    (rowIndex: number) => {\n      const clipboardResult = clipboardCopy({\n        type,\n        blocks: clientBlocks,\n        getDataToCopy: () =>\n          reduceFormStateByPath({\n            formState: { ...getFields() },\n            path,\n            rowIndex,\n          }),\n        path,\n        rowIndex,\n        t,\n      })\n\n      if (typeof clipboardResult === 'string') {\n        toast.error(clipboardResult)\n      } else {\n        toast.success(t('general:copied'))\n      }\n    },\n    [clientBlocks, path, t, type, getFields],\n  )\n\n  const pasteRow = useCallback(\n    (rowIndex: number) => {\n      const pasteArgs = {\n        onPaste: (dataFromClipboard: ClipboardPasteData) => {\n          const formState = { ...getFields() }\n          const newState = mergeFormStateFromClipboard({\n            dataFromClipboard,\n            formState,\n            path,\n            rowIndex,\n          })\n          replaceState(newState)\n          setModified(true)\n        },\n        path,\n        schemaBlocks: clientBlocks,\n        t,\n      }\n\n      const clipboardResult = clipboardPaste(pasteArgs)\n\n      if (typeof clipboardResult === 'string') {\n        toast.error(clipboardResult)\n      }\n    },\n    [clientBlocks, getFields, path, replaceState, setModified, t],\n  )\n\n  const pasteBlocks = useCallback(\n    (dataFromClipboard: ClipboardPasteData) => {\n      const formState = { ...getFields() }\n      const newState = mergeFormStateFromClipboard({\n        dataFromClipboard,\n        formState,\n        path,\n      })\n      replaceState(newState)\n      setModified(true)\n    },\n    [getFields, path, replaceState, setModified],\n  )\n\n  const hasMaxRows = maxRows && rows.length >= maxRows\n\n  const fieldErrorCount = errorPaths.length\n  const fieldHasErrors = submitted && fieldErrorCount + (valid ? 0 : 1) > 0\n\n  const showMinRows = rows.length < minRows || (required && rows.length === 0)\n  const showRequired = readOnly && rows.length === 0\n\n  return (\n    <div\n      className={[\n        fieldBaseClass,\n        baseClass,\n        className,\n        fieldHasErrors ? `${baseClass}--has-error` : `${baseClass}--has-no-error`,\n      ]\n        .filter(Boolean)\n        .join(' ')}\n      id={`field-${path?.replace(/\\./g, '__')}`}\n    >\n      {showError && (\n        <RenderCustomComponent\n          CustomComponent={Error}\n          Fallback={<FieldError path={path} showError={showError} />}\n        />\n      )}\n      <header className={`${baseClass}__header`}>\n        <div className={`${baseClass}__header-wrap`}>\n          <div className={`${baseClass}__heading-with-error`}>\n            <h3>\n              <RenderCustomComponent\n                CustomComponent={Label}\n                Fallback={\n                  <FieldLabel\n                    as=\"span\"\n                    label={label}\n                    localized={localized}\n                    path={path}\n                    required={required}\n                  />\n                }\n              />\n            </h3>\n            {fieldHasErrors && fieldErrorCount > 0 && (\n              <ErrorPill count={fieldErrorCount} i18n={i18n} withMessage />\n            )}\n          </div>\n          <ul className={`${baseClass}__header-actions`}>\n            {rows.length > 0 && (\n              <Fragment>\n                <li>\n                  <button\n                    className={`${baseClass}__header-action`}\n                    onClick={() => toggleCollapseAll(true)}\n                    type=\"button\"\n                  >\n                    {t('fields:collapseAll')}\n                  </button>\n                </li>\n                <li>\n                  <button\n                    className={`${baseClass}__header-action`}\n                    onClick={() => toggleCollapseAll(false)}\n                    type=\"button\"\n                  >\n                    {t('fields:showAll')}\n                  </button>\n                </li>\n              </Fragment>\n            )}\n            <li>\n              <ClipboardAction\n                allowCopy={rows?.length > 0}\n                allowPaste={!readOnly}\n                blocks={clientBlocks}\n                className={`${baseClass}__header-action`}\n                disabled={disabled}\n                getDataToCopy={() =>\n                  reduceFormStateByPath({\n                    formState: { ...getFields() },\n                    path,\n                  })\n                }\n                onPaste={pasteBlocks}\n                path={path}\n                type={type}\n              />\n            </li>\n          </ul>\n        </div>\n        <RenderCustomComponent\n          CustomComponent={Description}\n          Fallback={<FieldDescription description={description} path={path} />}\n        />\n      </header>\n      {BeforeInput}\n      <NullifyLocaleField fieldValue={value} localized={localized} path={path} />\n      {(rows.length > 0 || (!valid && (showRequired || showMinRows))) && (\n        <DraggableSortable\n          className={`${baseClass}__rows`}\n          ids={rows.map((row) => row.id)}\n          onDragEnd={({ moveFromIndex, moveToIndex }) => moveRow(moveFromIndex, moveToIndex)}\n        >\n          {rows.map((row, i) => {\n            const { blockType, isLoading } = row\n            const blockConfig: ClientBlock =\n              config.blocksMap[blockType] ??\n              ((blockReferences ?? blocks).find(\n                (block) => typeof block !== 'string' && block.slug === blockType,\n              ) as ClientBlock)\n\n            if (blockConfig) {\n              const rowPath = `${path}.${i}`\n\n              const rowErrorCount = errorPaths.filter((errorPath) =>\n                errorPath.startsWith(rowPath + '.'),\n              ).length\n\n              return (\n                <DraggableSortableItem\n                  disabled={readOnly || disabled || !isSortable}\n                  id={row.id}\n                  key={row.id}\n                >\n                  {(draggableSortableItemProps) => (\n                    <BlockRow\n                      {...draggableSortableItemProps}\n                      addRow={addRow}\n                      block={blockConfig}\n                      blocks={blockReferences ?? blocks}\n                      copyRow={copyRow}\n                      duplicateRow={duplicateRow}\n                      errorCount={rowErrorCount}\n                      fields={blockConfig.fields}\n                      hasMaxRows={hasMaxRows}\n                      isLoading={isLoading}\n                      isSortable={isSortable}\n                      Label={rows?.[i]?.customComponents?.RowLabel}\n                      labels={labels}\n                      moveRow={moveRow}\n                      parentPath={path}\n                      pasteRow={pasteRow}\n                      path={rowPath}\n                      permissions={permissions}\n                      readOnly={readOnly || disabled}\n                      removeRow={removeRow}\n                      row={row}\n                      rowCount={rows.length}\n                      rowIndex={i}\n                      schemaPath={schemaPath + blockConfig.slug}\n                      setCollapse={setCollapse}\n                    />\n                  )}\n                </DraggableSortableItem>\n              )\n            }\n\n            return null\n          })}\n          {!editingDefaultLocale && (\n            <React.Fragment>\n              {showMinRows && (\n                <Banner type=\"error\">\n                  {t('validation:requiresAtLeast', {\n                    count: minRows,\n                    label:\n                      getTranslation(minRows > 1 ? labels.plural : labels.singular, i18n) ||\n                      t(minRows > 1 ? 'general:row' : 'general:rows'),\n                  })}\n                </Banner>\n              )}\n              {showRequired && (\n                <Banner>\n                  {t('validation:fieldHasNo', { label: getTranslation(labels.plural, i18n) })}\n                </Banner>\n              )}\n            </React.Fragment>\n          )}\n        </DraggableSortable>\n      )}\n      {!hasMaxRows && (\n        <Fragment>\n          <DrawerToggler\n            className={`${baseClass}__drawer-toggler`}\n            disabled={readOnly || disabled}\n            slug={drawerSlug}\n          >\n            <Button\n              buttonStyle=\"icon-label\"\n              disabled={readOnly || disabled}\n              el=\"span\"\n              icon=\"plus\"\n              iconPosition=\"left\"\n              iconStyle=\"with-border\"\n            >\n              {t('fields:addLabel', { label: getTranslation(labels.singular, i18n) })}\n            </Button>\n          </DrawerToggler>\n          <BlocksDrawer\n            addRow={addRow}\n            addRowIndex={rows?.length || 0}\n            blocks={blockReferences ?? blocks}\n            drawerSlug={drawerSlug}\n            labels={labels}\n          />\n        </Fragment>\n      )}\n      {AfterInput}\n    </div>\n  )\n}\n\nexport const BlocksField = withCondition(BlocksFieldComponent)\n"],"mappings":"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","ignoreList":[]}