{"version":3,"sources":["../../src/schema/initCollections.ts"],"sourcesContent":["import type {\n  Collection,\n  Field,\n  GraphQLInfo,\n  SanitizedCollectionConfig,\n  SanitizedConfig,\n} from 'payload'\n\nimport {\n  GraphQLBoolean,\n  GraphQLInt,\n  GraphQLNonNull,\n  GraphQLObjectType,\n  GraphQLString,\n} from 'graphql'\nimport { buildVersionCollectionFields, flattenTopLevelFields, formatNames, toWords } from 'payload'\nimport { fieldAffectsData, getLoginOptions } from 'payload/shared'\n\nimport type { ObjectTypeConfig } from './buildObjectType.js'\n\nimport { forgotPassword } from '../resolvers/auth/forgotPassword.js'\nimport { init } from '../resolvers/auth/init.js'\nimport { login } from '../resolvers/auth/login.js'\nimport { logout } from '../resolvers/auth/logout.js'\nimport { me } from '../resolvers/auth/me.js'\nimport { refresh } from '../resolvers/auth/refresh.js'\nimport { resetPassword } from '../resolvers/auth/resetPassword.js'\nimport { unlock } from '../resolvers/auth/unlock.js'\nimport { verifyEmail } from '../resolvers/auth/verifyEmail.js'\nimport { countResolver } from '../resolvers/collections/count.js'\nimport { createResolver } from '../resolvers/collections/create.js'\nimport { getDeleteResolver } from '../resolvers/collections/delete.js'\nimport { docAccessResolver } from '../resolvers/collections/docAccess.js'\nimport { duplicateResolver } from '../resolvers/collections/duplicate.js'\nimport { findResolver } from '../resolvers/collections/find.js'\nimport { findByIDResolver } from '../resolvers/collections/findByID.js'\nimport { findVersionByIDResolver } from '../resolvers/collections/findVersionByID.js'\nimport { findVersionsResolver } from '../resolvers/collections/findVersions.js'\nimport { restoreVersionResolver } from '../resolvers/collections/restoreVersion.js'\nimport { updateResolver } from '../resolvers/collections/update.js'\nimport { formatName } from '../utilities/formatName.js'\nimport { buildMutationInputType, getCollectionIDType } from './buildMutationInputType.js'\nimport { buildObjectType } from './buildObjectType.js'\nimport { buildPaginatedListType } from './buildPaginatedListType.js'\nimport { buildPolicyType } from './buildPoliciesType.js'\nimport { buildWhereInputType } from './buildWhereInputType.js'\n\ntype InitCollectionsGraphQLArgs = {\n  config: SanitizedConfig\n  graphqlResult: GraphQLInfo\n}\nexport function initCollections({ config, graphqlResult }: InitCollectionsGraphQLArgs): void {\n  Object.keys(graphqlResult.collections).forEach((slug) => {\n    const collection: Collection = graphqlResult.collections[slug]\n    const {\n      config: collectionConfig,\n      config: { fields, graphQL = {} as SanitizedCollectionConfig['graphQL'], versions },\n    } = collection\n\n    if (!graphQL) {\n      return\n    }\n\n    let singularName\n    let pluralName\n\n    const fromSlug = formatNames(collection.config.slug)\n\n    if (graphQL.singularName) {\n      singularName = toWords(graphQL.singularName, true)\n    } else {\n      singularName = fromSlug.singular\n    }\n    if (graphQL.pluralName) {\n      pluralName = toWords(graphQL.pluralName, true)\n    } else {\n      pluralName = fromSlug.plural\n    }\n\n    // For collections named 'Media' or similar,\n    // there is a possibility that the singular name\n    // will equal the plural name. Append `all` to the beginning\n    // of potential conflicts\n    if (singularName === pluralName) {\n      pluralName = `all${singularName}`\n    }\n\n    collection.graphQL = {} as Collection['graphQL']\n\n    const hasIDField =\n      flattenTopLevelFields(fields).findIndex(\n        (field) => fieldAffectsData(field) && field.name === 'id',\n      ) > -1\n\n    const idType = getCollectionIDType(config.db.defaultIDType, collectionConfig)\n\n    const baseFields: ObjectTypeConfig = {}\n\n    const whereInputFields = [...fields]\n\n    if (!hasIDField) {\n      baseFields.id = { type: new GraphQLNonNull(idType) }\n      whereInputFields.push({\n        name: 'id',\n        type: config.db.defaultIDType as 'text',\n      })\n    }\n\n    const forceNullableObjectType = Boolean(versions?.drafts)\n\n    collection.graphQL.type = buildObjectType({\n      name: singularName,\n      baseFields,\n      collectionSlug: collectionConfig.slug,\n      config,\n      fields,\n      forceNullable: forceNullableObjectType,\n      graphqlResult,\n      parentName: singularName,\n    })\n\n    collection.graphQL.paginatedType = buildPaginatedListType(pluralName, collection.graphQL.type)\n\n    collection.graphQL.whereInputType = buildWhereInputType({\n      name: singularName,\n      fields: whereInputFields,\n      parentName: singularName,\n    })\n\n    const mutationInputFields = [...fields]\n\n    if (\n      collectionConfig.auth &&\n      (!collectionConfig.auth.disableLocalStrategy ||\n        (typeof collectionConfig.auth.disableLocalStrategy === 'object' &&\n          collectionConfig.auth.disableLocalStrategy.optionalPassword))\n    ) {\n      mutationInputFields.push({\n        name: 'password',\n        type: 'text',\n        label: 'Password',\n        required: !(\n          typeof collectionConfig.auth.disableLocalStrategy === 'object' &&\n          collectionConfig.auth.disableLocalStrategy.optionalPassword\n        ),\n      })\n    }\n\n    let mutationCreateInputFields = mutationInputFields\n\n    if (\n      config.db.allowIDOnCreate &&\n      !collectionConfig.flattenedFields.some((field) => field.name === 'id')\n    ) {\n      mutationCreateInputFields = [\n        ...mutationCreateInputFields,\n        {\n          name: 'id',\n          type: config.db.defaultIDType,\n        } as Field,\n      ]\n    }\n\n    const createMutationInputType = buildMutationInputType({\n      name: singularName,\n      config,\n      fields: mutationCreateInputFields,\n      graphqlResult,\n      parentIsLocalized: false,\n      parentName: singularName,\n    })\n    if (createMutationInputType) {\n      collection.graphQL.mutationInputType = new GraphQLNonNull(createMutationInputType)\n    }\n\n    const updateMutationInputType = buildMutationInputType({\n      name: `${singularName}Update`,\n      config,\n      fields: mutationInputFields.filter(\n        (field) => !(fieldAffectsData(field) && field.name === 'id'),\n      ),\n      forceNullable: true,\n      graphqlResult,\n      parentIsLocalized: false,\n      parentName: `${singularName}Update`,\n    })\n    if (updateMutationInputType) {\n      collection.graphQL.updateMutationInputType = new GraphQLNonNull(updateMutationInputType)\n    }\n\n    const queriesEnabled =\n      typeof collectionConfig.graphQL !== 'object' || !collectionConfig.graphQL.disableQueries\n    const mutationsEnabled =\n      typeof collectionConfig.graphQL !== 'object' || !collectionConfig.graphQL.disableMutations\n\n    if (queriesEnabled) {\n      graphqlResult.Query.fields[singularName] = {\n        type: collection.graphQL.type,\n        args: {\n          id: { type: new GraphQLNonNull(idType) },\n          draft: { type: GraphQLBoolean },\n          ...(config.localization\n            ? {\n                fallbackLocale: { type: graphqlResult.types.fallbackLocaleInputType },\n                locale: { type: graphqlResult.types.localeInputType },\n              }\n            : {}),\n          trash: { type: GraphQLBoolean },\n        },\n        resolve: findByIDResolver(collection),\n      }\n\n      graphqlResult.Query.fields[pluralName] = {\n        type: buildPaginatedListType(pluralName, collection.graphQL.type),\n        args: {\n          draft: { type: GraphQLBoolean },\n          where: { type: collection.graphQL.whereInputType },\n          ...(config.localization\n            ? {\n                fallbackLocale: { type: graphqlResult.types.fallbackLocaleInputType },\n                locale: { type: graphqlResult.types.localeInputType },\n              }\n            : {}),\n          limit: { type: GraphQLInt },\n          page: { type: GraphQLInt },\n          pagination: { type: GraphQLBoolean },\n          sort: { type: GraphQLString },\n          trash: { type: GraphQLBoolean },\n        },\n        resolve: findResolver(collection),\n      }\n\n      graphqlResult.Query.fields[`count${pluralName}`] = {\n        type: new GraphQLObjectType({\n          name: `count${pluralName}`,\n          fields: {\n            totalDocs: { type: GraphQLInt },\n          },\n        }),\n        args: {\n          draft: { type: GraphQLBoolean },\n          where: { type: collection.graphQL.whereInputType },\n          ...(config.localization\n            ? {\n                locale: { type: graphqlResult.types.localeInputType },\n              }\n            : {}),\n        },\n        resolve: countResolver(collection),\n      }\n\n      graphqlResult.Query.fields[`docAccess${singularName}`] = {\n        type: buildPolicyType({\n          type: 'collection',\n          entity: collectionConfig,\n          scope: 'docAccess',\n          typeSuffix: 'DocAccess',\n        }),\n        args: {\n          id: { type: new GraphQLNonNull(idType) },\n        },\n        resolve: docAccessResolver(collection),\n      }\n    }\n\n    if (mutationsEnabled) {\n      graphqlResult.Mutation.fields[`create${singularName}`] = {\n        type: collection.graphQL.type,\n        args: {\n          ...(createMutationInputType\n            ? { data: { type: collection.graphQL.mutationInputType } }\n            : {}),\n          draft: { type: GraphQLBoolean },\n          ...(config.localization\n            ? {\n                locale: { type: graphqlResult.types.localeInputType },\n              }\n            : {}),\n        },\n        resolve: createResolver(collection),\n      }\n\n      graphqlResult.Mutation.fields[`update${singularName}`] = {\n        type: collection.graphQL.type,\n        args: {\n          id: { type: new GraphQLNonNull(idType) },\n          autosave: { type: GraphQLBoolean },\n          ...(updateMutationInputType\n            ? { data: { type: collection.graphQL.updateMutationInputType } }\n            : {}),\n          draft: { type: GraphQLBoolean },\n          ...(config.localization\n            ? {\n                locale: { type: graphqlResult.types.localeInputType },\n              }\n            : {}),\n          trash: { type: GraphQLBoolean },\n        },\n        resolve: updateResolver(collection),\n      }\n\n      graphqlResult.Mutation.fields[`delete${singularName}`] = {\n        type: collection.graphQL.type,\n        args: {\n          id: { type: new GraphQLNonNull(idType) },\n          trash: { type: GraphQLBoolean },\n        },\n        resolve: getDeleteResolver(collection),\n      }\n\n      if (collectionConfig.disableDuplicate !== true) {\n        graphqlResult.Mutation.fields[`duplicate${singularName}`] = {\n          type: collection.graphQL.type,\n          args: {\n            id: { type: new GraphQLNonNull(idType) },\n            ...(createMutationInputType\n              ? { data: { type: collection.graphQL.mutationInputType } }\n              : {}),\n          },\n          resolve: duplicateResolver(collection),\n        }\n      }\n    }\n\n    if (collectionConfig.versions) {\n      const versionIDType = config.db.defaultIDType === 'text' ? GraphQLString : GraphQLInt\n      const versionCollectionFields: Field[] = [\n        ...buildVersionCollectionFields(config, collectionConfig),\n        {\n          name: 'id',\n          type: config.db.defaultIDType as 'text',\n        },\n        {\n          name: 'createdAt',\n          type: 'date',\n          label: ({ t }) => t('general:createdAt'),\n        },\n        {\n          name: 'updatedAt',\n          type: 'date',\n          label: ({ t }) => t('general:updatedAt'),\n        },\n      ]\n\n      collection.graphQL.versionType = buildObjectType({\n        name: `${singularName}Version`,\n        collectionSlug: collectionConfig.slug,\n        config,\n        fields: versionCollectionFields,\n        forceNullable: forceNullableObjectType,\n        graphqlResult,\n        parentName: `${singularName}Version`,\n      })\n\n      if (queriesEnabled) {\n        graphqlResult.Query.fields[`version${formatName(singularName)}`] = {\n          type: collection.graphQL.versionType,\n          args: {\n            id: { type: versionIDType },\n            ...(config.localization\n              ? {\n                  fallbackLocale: { type: graphqlResult.types.fallbackLocaleInputType },\n                  locale: { type: graphqlResult.types.localeInputType },\n                }\n              : {}),\n            trash: { type: GraphQLBoolean },\n          },\n          resolve: findVersionByIDResolver(collection),\n        }\n        graphqlResult.Query.fields[`versions${pluralName}`] = {\n          type: buildPaginatedListType(\n            `versions${formatName(pluralName)}`,\n            collection.graphQL.versionType,\n          ),\n          args: {\n            where: {\n              type: buildWhereInputType({\n                name: `versions${singularName}`,\n                fields: versionCollectionFields,\n                parentName: `versions${singularName}`,\n              }),\n            },\n            ...(config.localization\n              ? {\n                  fallbackLocale: { type: graphqlResult.types.fallbackLocaleInputType },\n                  locale: { type: graphqlResult.types.localeInputType },\n                }\n              : {}),\n            limit: { type: GraphQLInt },\n            page: { type: GraphQLInt },\n            pagination: { type: GraphQLBoolean },\n            sort: { type: GraphQLString },\n            trash: { type: GraphQLBoolean },\n          },\n          resolve: findVersionsResolver(collection),\n        }\n      }\n\n      if (mutationsEnabled) {\n        graphqlResult.Mutation.fields[`restoreVersion${formatName(singularName)}`] = {\n          type: collection.graphQL.type,\n          args: {\n            id: { type: versionIDType },\n            draft: { type: GraphQLBoolean },\n          },\n          resolve: restoreVersionResolver(collection),\n        }\n      }\n    }\n\n    if (collectionConfig.auth) {\n      const authFields: Field[] =\n        collectionConfig.auth.disableLocalStrategy ||\n        (collectionConfig.auth.loginWithUsername &&\n          !collectionConfig.auth.loginWithUsername.allowEmailLogin &&\n          !collectionConfig.auth.loginWithUsername.requireEmail)\n          ? []\n          : [\n              {\n                name: 'email',\n                type: 'email',\n                required: true,\n              },\n            ]\n      collection.graphQL.JWT = buildObjectType({\n        name: formatName(`${slug}JWT`),\n        config,\n        fields: [\n          ...collectionConfig.fields.filter((field) => fieldAffectsData(field) && field.saveToJWT),\n          ...authFields,\n          {\n            name: 'collection',\n            type: 'text',\n            required: true,\n          },\n        ],\n        graphqlResult,\n        parentName: formatName(`${slug}JWT`),\n      })\n\n      if (queriesEnabled) {\n        graphqlResult.Query.fields[`me${singularName}`] = {\n          type: new GraphQLObjectType({\n            name: formatName(`${slug}Me`),\n            fields: {\n              collection: {\n                type: GraphQLString,\n              },\n              exp: {\n                type: GraphQLInt,\n              },\n              strategy: {\n                type: GraphQLString,\n              },\n              token: {\n                type: GraphQLString,\n              },\n              user: {\n                type: collection.graphQL.type,\n              },\n            },\n          }),\n          resolve: me(collection),\n        }\n\n        graphqlResult.Query.fields[`initialized${singularName}`] = {\n          type: GraphQLBoolean,\n          resolve: init(collection.config.slug),\n        }\n      }\n\n      if (mutationsEnabled) {\n        graphqlResult.Mutation.fields[`refreshToken${singularName}`] = {\n          type: new GraphQLObjectType({\n            name: formatName(`${slug}Refreshed${singularName}`),\n            fields: {\n              exp: {\n                type: GraphQLInt,\n              },\n              refreshedToken: {\n                type: GraphQLString,\n              },\n              strategy: {\n                type: GraphQLString,\n              },\n              user: {\n                type: collection.graphQL.JWT,\n              },\n            },\n          }),\n          resolve: refresh(collection),\n        }\n\n        graphqlResult.Mutation.fields[`logout${singularName}`] = {\n          type: GraphQLString,\n          args: {\n            allSessions: { type: GraphQLBoolean },\n          },\n          resolve: logout(collection),\n        }\n\n        if (!collectionConfig.auth.disableLocalStrategy) {\n          const authArgs = {}\n\n          const { canLoginWithEmail, canLoginWithUsername } = getLoginOptions(\n            collectionConfig.auth.loginWithUsername,\n          )\n\n          if (canLoginWithEmail) {\n            authArgs['email'] = { type: new GraphQLNonNull(GraphQLString) }\n          }\n          if (canLoginWithUsername) {\n            authArgs['username'] = { type: new GraphQLNonNull(GraphQLString) }\n          }\n\n          if (collectionConfig.auth.maxLoginAttempts > 0) {\n            graphqlResult.Mutation.fields[`unlock${singularName}`] = {\n              type: new GraphQLNonNull(GraphQLBoolean),\n              args: authArgs,\n              resolve: unlock(collection),\n            }\n          }\n\n          graphqlResult.Mutation.fields[`login${singularName}`] = {\n            type: new GraphQLObjectType({\n              name: formatName(`${slug}LoginResult`),\n              fields: {\n                exp: {\n                  type: GraphQLInt,\n                },\n                token: {\n                  type: GraphQLString,\n                },\n                user: {\n                  type: collection.graphQL.type,\n                },\n              },\n            }),\n            args: {\n              ...authArgs,\n              password: { type: GraphQLString },\n            },\n            resolve: login(collection),\n          }\n\n          graphqlResult.Mutation.fields[`forgotPassword${singularName}`] = {\n            type: new GraphQLNonNull(GraphQLBoolean),\n            args: {\n              disableEmail: { type: GraphQLBoolean },\n              expiration: { type: GraphQLInt },\n              ...authArgs,\n            },\n            resolve: forgotPassword(collection),\n          }\n\n          graphqlResult.Mutation.fields[`resetPassword${singularName}`] = {\n            type: new GraphQLObjectType({\n              name: formatName(`${slug}ResetPassword`),\n              fields: {\n                token: { type: GraphQLString },\n                user: { type: collection.graphQL.type },\n              },\n            }),\n            args: {\n              password: { type: GraphQLString },\n              token: { type: GraphQLString },\n            },\n            resolve: resetPassword(collection),\n          }\n\n          graphqlResult.Mutation.fields[`verifyEmail${singularName}`] = {\n            type: GraphQLBoolean,\n            args: {\n              token: { type: GraphQLString },\n            },\n            resolve: verifyEmail(collection),\n          }\n        }\n      }\n    }\n  })\n}\n"],"names":["GraphQLBoolean","GraphQLInt","GraphQLNonNull","GraphQLObjectType","GraphQLString","buildVersionCollectionFields","flattenTopLevelFields","formatNames","toWords","fieldAffectsData","getLoginOptions","forgotPassword","init","login","logout","me","refresh","resetPassword","unlock","verifyEmail","countResolver","createResolver","getDeleteResolver","docAccessResolver","duplicateResolver","findResolver","findByIDResolver","findVersionByIDResolver","findVersionsResolver","restoreVersionResolver","updateResolver","formatName","buildMutationInputType","getCollectionIDType","buildObjectType","buildPaginatedListType","buildPolicyType","buildWhereInputType","initCollections","config","graphqlResult","Object","keys","collections","forEach","slug","collection","collectionConfig","fields","graphQL","versions","singularName","pluralName","fromSlug","singular","plural","hasIDField","findIndex","field","name","idType","db","defaultIDType","baseFields","whereInputFields","id","type","push","forceNullableObjectType","Boolean","drafts","collectionSlug","forceNullable","parentName","paginatedType","whereInputType","mutationInputFields","auth","disableLocalStrategy","optionalPassword","label","required","mutationCreateInputFields","allowIDOnCreate","flattenedFields","some","createMutationInputType","parentIsLocalized","mutationInputType","updateMutationInputType","filter","queriesEnabled","disableQueries","mutationsEnabled","disableMutations","Query","args","draft","localization","fallbackLocale","types","fallbackLocaleInputType","locale","localeInputType","trash","resolve","where","limit","page","pagination","sort","totalDocs","entity","scope","typeSuffix","Mutation","data","autosave","disableDuplicate","versionIDType","versionCollectionFields","t","versionType","authFields","loginWithUsername","allowEmailLogin","requireEmail","JWT","saveToJWT","exp","strategy","token","user","refreshedToken","allSessions","authArgs","canLoginWithEmail","canLoginWithUsername","maxLoginAttempts","password","disableEmail","expiration"],"mappings":"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"}