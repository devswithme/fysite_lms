{"version":3,"sources":["../../../src/resolvers/globals/findVersions.ts"],"sourcesContent":["import type { Document, PayloadRequest, SanitizedGlobalConfig, Where } from 'payload'\n\nimport { findVersionsOperationGlobal, isolateObjectProperty } from 'payload'\n\nimport type { Context } from '../types.js'\n\nexport type Resolver = (\n  _: unknown,\n  args: {\n    fallbackLocale?: string\n    limit?: number\n    locale?: string\n    page?: number\n    pagination?: boolean\n    sort?: string\n    where: Where\n  },\n  context: {\n    req: PayloadRequest\n  },\n) => Promise<Document>\n\nexport function findVersions(globalConfig: SanitizedGlobalConfig): Resolver {\n  return async function resolver(_, args, context: Context) {\n    const options = {\n      depth: 0,\n      globalConfig,\n      limit: args.limit,\n      page: args.page,\n      pagination: args.pagination,\n      req: isolateObjectProperty(context.req, 'transactionID'),\n      sort: args.sort,\n      where: args.where,\n    }\n\n    const result = await findVersionsOperationGlobal(options)\n\n    return result\n  }\n}\n"],"names":["findVersionsOperationGlobal","isolateObjectProperty","findVersions","globalConfig","resolver","_","args","context","options","depth","limit","page","pagination","req","sort","where","result"],"mappings":"AAEA,SAASA,2BAA2B,EAAEC,qBAAqB,QAAQ,UAAS;AAoB5E,OAAO,SAASC,aAAaC,YAAmC;IAC9D,OAAO,eAAeC,SAASC,CAAC,EAAEC,IAAI,EAAEC,OAAgB;QACtD,MAAMC,UAAU;YACdC,OAAO;YACPN;YACAO,OAAOJ,KAAKI,KAAK;YACjBC,MAAML,KAAKK,IAAI;YACfC,YAAYN,KAAKM,UAAU;YAC3BC,KAAKZ,sBAAsBM,QAAQM,GAAG,EAAE;YACxCC,MAAMR,KAAKQ,IAAI;YACfC,OAAOT,KAAKS,KAAK;QACnB;QAEA,MAAMC,SAAS,MAAMhB,4BAA4BQ;QAEjD,OAAOQ;IACT;AACF"}