{"version":3,"sources":["../src/findDistinct.ts"],"sourcesContent":["import type { FindDistinct, SanitizedCollectionConfig } from 'payload'\n\nimport toSnakeCase from 'to-snake-case'\n\nimport type { DrizzleAdapter, GenericColumn } from './types.js'\n\nimport { buildQuery } from './queries/buildQuery.js'\nimport { selectDistinct } from './queries/selectDistinct.js'\nimport { getTransaction } from './utilities/getTransaction.js'\nimport { DistinctSymbol } from './utilities/rawConstraint.js'\n\nexport const findDistinct: FindDistinct = async function (this: DrizzleAdapter, args) {\n  const db = await getTransaction(this, args.req)\n  const collectionConfig: SanitizedCollectionConfig =\n    this.payload.collections[args.collection].config\n  const page = args.page || 1\n  const offset = args.limit ? (page - 1) * args.limit : undefined\n  const tableName = this.tableNameMap.get(toSnakeCase(collectionConfig.slug))\n\n  const { joins, orderBy, selectFields, where } = buildQuery({\n    adapter: this,\n    fields: collectionConfig.flattenedFields,\n    locale: args.locale,\n    sort: args.sort ?? args.field,\n    tableName,\n    where: {\n      and: [\n        args.where ?? {},\n        {\n          [args.field]: {\n            equals: DistinctSymbol,\n          },\n        },\n      ],\n    },\n  })\n\n  orderBy.pop()\n\n  const selectDistinctResult = await selectDistinct({\n    adapter: this,\n    db,\n    forceRun: true,\n    joins,\n    query: ({ query }) => {\n      query = query.orderBy(() => orderBy.map(({ column, order }) => order(column)))\n\n      if (args.limit) {\n        if (offset) {\n          query = query.offset(offset)\n        }\n\n        query = query.limit(args.limit)\n      }\n\n      return query\n    },\n    selectFields: {\n      _selected: selectFields['_selected'],\n      ...(orderBy[0].column === selectFields['_selected'] ? {} : { _order: orderBy[0].column }),\n    } as Record<string, GenericColumn>,\n    tableName,\n    where,\n  })\n\n  const values = selectDistinctResult.map((each) => ({\n    [args.field]: (each as Record<string, any>)._selected,\n  }))\n\n  if (args.limit) {\n    const totalDocs = await this.countDistinct({\n      column: selectFields['_selected'],\n      db,\n      joins,\n      tableName,\n      where,\n    })\n\n    const totalPages = Math.ceil(totalDocs / args.limit)\n    const hasPrevPage = page > 1\n    const hasNextPage = totalPages > page\n    const pagingCounter = (page - 1) * args.limit + 1\n\n    return {\n      hasNextPage,\n      hasPrevPage,\n      limit: args.limit,\n      nextPage: hasNextPage ? page + 1 : null,\n      page,\n      pagingCounter,\n      prevPage: hasPrevPage ? page - 1 : null,\n      totalDocs,\n      totalPages,\n      values,\n    }\n  }\n\n  return {\n    hasNextPage: false,\n    hasPrevPage: false,\n    limit: 0,\n    page: 1,\n    pagingCounter: 1,\n    totalDocs: values.length,\n    totalPages: 1,\n    values,\n  }\n}\n"],"names":["toSnakeCase","buildQuery","selectDistinct","getTransaction","DistinctSymbol","findDistinct","args","db","req","collectionConfig","payload","collections","collection","config","page","offset","limit","undefined","tableName","tableNameMap","get","slug","joins","orderBy","selectFields","where","adapter","fields","flattenedFields","locale","sort","field","and","equals","pop","selectDistinctResult","forceRun","query","map","column","order","_selected","_order","values","each","totalDocs","countDistinct","totalPages","Math","ceil","hasPrevPage","hasNextPage","pagingCounter","nextPage","prevPage","length"],"mappings":"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"}