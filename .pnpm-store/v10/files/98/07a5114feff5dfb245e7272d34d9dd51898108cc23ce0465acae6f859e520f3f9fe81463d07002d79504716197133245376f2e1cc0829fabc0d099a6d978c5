{"version":3,"sources":["../../src/find/traverseFields.ts"],"sourcesContent":["import type { LibSQLDatabase } from 'drizzle-orm/libsql'\nimport type { SQLiteSelect, SQLiteSelectBase } from 'drizzle-orm/sqlite-core'\n\nimport { and, asc, count, desc, eq, or, sql } from 'drizzle-orm'\nimport {\n  appendVersionToQueryKey,\n  buildVersionCollectionFields,\n  combineQueries,\n  type FlattenedField,\n  getQueryDraftsSort,\n  type JoinQuery,\n  type SelectMode,\n  type SelectType,\n  type Where,\n} from 'payload'\nimport { fieldIsVirtual, fieldShouldBeLocalized } from 'payload/shared'\nimport toSnakeCase from 'to-snake-case'\n\nimport type { BuildQueryJoinAliases, DrizzleAdapter } from '../types.js'\nimport type { Result } from './buildFindManyArgs.js'\n\nimport { buildQuery } from '../queries/buildQuery.js'\nimport { getTableAlias } from '../queries/getTableAlias.js'\nimport { operatorMap } from '../queries/operatorMap.js'\nimport { getArrayRelationName } from '../utilities/getArrayRelationName.js'\nimport { getNameFromDrizzleTable } from '../utilities/getNameFromDrizzleTable.js'\nimport { jsonAggBuildObject } from '../utilities/json.js'\nimport { rawConstraint } from '../utilities/rawConstraint.js'\nimport {\n  InternalBlockTableNameIndex,\n  resolveBlockTableName,\n} from '../utilities/validateExistingBlockIsIdentical.js'\n\nconst flattenAllWherePaths = (where: Where, paths: string[]) => {\n  for (const k in where) {\n    if (['AND', 'OR'].includes(k.toUpperCase())) {\n      if (Array.isArray(where[k])) {\n        for (const whereField of where[k]) {\n          flattenAllWherePaths(whereField, paths)\n        }\n      }\n    } else {\n      // TODO: explore how to support arrays/relationship querying.\n      paths.push(k.split('.').join('_'))\n    }\n  }\n}\n\nconst buildSQLWhere = (where: Where, alias: string) => {\n  for (const k in where) {\n    if (['AND', 'OR'].includes(k.toUpperCase())) {\n      if (Array.isArray(where[k])) {\n        const op = 'AND' === k.toUpperCase() ? and : or\n        const accumulated = []\n        for (const whereField of where[k]) {\n          accumulated.push(buildSQLWhere(whereField, alias))\n        }\n        return op(...accumulated)\n      }\n    } else {\n      const payloadOperator = Object.keys(where[k])[0]\n      const value = where[k][payloadOperator]\n\n      return operatorMap[payloadOperator](sql.raw(`\"${alias}\".\"${k.split('.').join('_')}\"`), value)\n    }\n  }\n}\n\ntype SQLSelect = SQLiteSelectBase<any, any, any, any>\n\ntype TraverseFieldArgs = {\n  _locales: Result\n  adapter: DrizzleAdapter\n  collectionSlug?: string\n  currentArgs: Result\n  currentTableName: string\n  depth?: number\n  draftsEnabled?: boolean\n  fields: FlattenedField[]\n  joinQuery: JoinQuery\n  joins?: BuildQueryJoinAliases\n  locale?: string\n  parentIsLocalized?: boolean\n  path: string\n  select?: SelectType\n  selectAllOnCurrentLevel?: boolean\n  selectMode?: SelectMode\n  tablePath: string\n  topLevelArgs: Record<string, unknown>\n  topLevelTableName: string\n  versions?: boolean\n  withTabledFields: {\n    numbers?: boolean\n    rels?: boolean\n    texts?: boolean\n  }\n}\n\nexport const traverseFields = ({\n  _locales,\n  adapter,\n  collectionSlug,\n  currentArgs,\n  currentTableName,\n  depth,\n  draftsEnabled,\n  fields,\n  joinQuery = {},\n  joins,\n  locale,\n  parentIsLocalized = false,\n  path,\n  select,\n  selectAllOnCurrentLevel = false,\n  selectMode,\n  tablePath,\n  topLevelArgs,\n  topLevelTableName,\n  versions,\n  withTabledFields,\n}: TraverseFieldArgs) => {\n  fields.forEach((field) => {\n    if (fieldIsVirtual(field)) {\n      return\n    }\n\n    const isFieldLocalized = fieldShouldBeLocalized({\n      field,\n      parentIsLocalized,\n    })\n\n    // handle simple relationship\n    if (\n      depth > 0 &&\n      (field.type === 'upload' || field.type === 'relationship') &&\n      !field.hasMany &&\n      typeof field.relationTo === 'string'\n    ) {\n      if (isFieldLocalized) {\n        _locales.with[`${path}${field.name}`] = true\n      } else {\n        currentArgs.with[`${path}${field.name}`] = true\n      }\n    }\n\n    switch (field.type) {\n      case 'array': {\n        const arraySelect = selectAllOnCurrentLevel ? true : select?.[field.name]\n\n        if (select) {\n          if (\n            (selectMode === 'include' && typeof arraySelect === 'undefined') ||\n            (selectMode === 'exclude' && arraySelect === false)\n          ) {\n            break\n          }\n        }\n\n        const withArray: Result = {\n          columns:\n            typeof arraySelect === 'object'\n              ? {\n                  id: true,\n                  _order: true,\n                }\n              : {\n                  _parentID: false,\n                },\n          orderBy: ({ _order }, { asc }) => [asc(_order)],\n          with: {},\n        }\n\n        const arrayTableName = adapter.tableNameMap.get(\n          `${currentTableName}_${tablePath}${toSnakeCase(field.name)}`,\n        )\n\n        if (typeof arraySelect === 'object') {\n          if (adapter.tables[arrayTableName]._locale) {\n            withArray.columns._locale = true\n          }\n\n          if (adapter.tables[arrayTableName]._uuid) {\n            withArray.columns._uuid = true\n          }\n        }\n\n        const arrayTableNameWithLocales = `${arrayTableName}${adapter.localesSuffix}`\n\n        if (adapter.tables[arrayTableNameWithLocales]) {\n          withArray.with._locales = {\n            columns:\n              typeof arraySelect === 'object'\n                ? {\n                    _locale: true,\n                  }\n                : {\n                    id: false,\n                    _parentID: false,\n                  },\n            with: {},\n          }\n        }\n\n        const relationName = getArrayRelationName({\n          field,\n          path: `${path}${field.name}`,\n          tableName: arrayTableName,\n        })\n\n        currentArgs.with[relationName] = withArray\n\n        traverseFields({\n          _locales: withArray.with._locales,\n          adapter,\n          currentArgs: withArray,\n          currentTableName: arrayTableName,\n          depth,\n          draftsEnabled,\n          fields: field.flattenedFields,\n          joinQuery,\n          locale,\n          parentIsLocalized: parentIsLocalized || field.localized,\n          path: '',\n          select: typeof arraySelect === 'object' ? arraySelect : undefined,\n          selectMode,\n          tablePath: '',\n          topLevelArgs,\n          topLevelTableName,\n          withTabledFields,\n        })\n\n        if (\n          typeof arraySelect === 'object' &&\n          withArray.with._locales &&\n          Object.keys(withArray.with._locales).length === 1\n        ) {\n          delete withArray.with._locales\n        }\n\n        break\n      }\n\n      case 'blocks': {\n        const blocksSelect = selectAllOnCurrentLevel ? true : select?.[field.name]\n\n        if (select) {\n          if (\n            (selectMode === 'include' && !blocksSelect) ||\n            (selectMode === 'exclude' && blocksSelect === false)\n          ) {\n            break\n          }\n        }\n\n        if (adapter.blocksAsJSON) {\n          if (select || selectAllOnCurrentLevel) {\n            const fieldPath = `${path}${field.name}`\n\n            if ((isFieldLocalized || parentIsLocalized) && _locales) {\n              _locales.columns[fieldPath] = true\n            } else if (adapter.tables[currentTableName]?.[fieldPath]) {\n              currentArgs.columns[fieldPath] = true\n            }\n          }\n\n          break\n        }\n\n        ;(field.blockReferences ?? field.blocks).forEach((_block) => {\n          const block = typeof _block === 'string' ? adapter.payload.blocks[_block] : _block\n          const blockKey = `_blocks_${block.slug}${!block[InternalBlockTableNameIndex] ? '' : `_${block[InternalBlockTableNameIndex]}`}`\n\n          let blockSelect: boolean | SelectType | undefined\n\n          let blockSelectMode = selectMode\n\n          if (selectMode === 'include' && blocksSelect === true) {\n            blockSelect = true\n          }\n\n          if (typeof blocksSelect === 'object') {\n            if (typeof blocksSelect[block.slug] === 'object') {\n              blockSelect = blocksSelect[block.slug]\n            } else if (\n              (selectMode === 'include' && typeof blocksSelect[block.slug] === 'undefined') ||\n              (selectMode === 'exclude' && blocksSelect[block.slug] === false)\n            ) {\n              blockSelect = {}\n              blockSelectMode = 'include'\n            } else if (selectMode === 'include' && blocksSelect[block.slug] === true) {\n              blockSelect = true\n            }\n          }\n\n          if (!topLevelArgs[blockKey]) {\n            const withBlock: Result = {\n              columns:\n                typeof blockSelect === 'object'\n                  ? {\n                      id: true,\n                      _order: true,\n                      _path: true,\n                    }\n                  : {\n                      _parentID: false,\n                    },\n              orderBy: ({ _order }, { asc }) => [asc(_order)],\n              with: {},\n            }\n\n            const tableName = resolveBlockTableName(\n              block,\n              adapter.tableNameMap.get(`${topLevelTableName}_blocks_${toSnakeCase(block.slug)}`),\n            )\n\n            if (typeof blockSelect === 'object') {\n              if (adapter.tables[tableName]._locale) {\n                withBlock.columns._locale = true\n              }\n\n              if (adapter.tables[tableName]._uuid) {\n                withBlock.columns._uuid = true\n              }\n            }\n\n            if (adapter.tables[`${tableName}${adapter.localesSuffix}`]) {\n              withBlock.with._locales = {\n                with: {},\n              }\n\n              if (typeof blockSelect === 'object') {\n                withBlock.with._locales.columns = {\n                  _locale: true,\n                }\n              }\n            }\n            topLevelArgs.with[blockKey] = withBlock\n\n            traverseFields({\n              _locales: withBlock.with._locales,\n              adapter,\n              currentArgs: withBlock,\n              currentTableName: tableName,\n              depth,\n              draftsEnabled,\n              fields: block.flattenedFields,\n              joinQuery,\n              locale,\n              parentIsLocalized: parentIsLocalized || field.localized,\n              path: '',\n              select: typeof blockSelect === 'object' ? blockSelect : undefined,\n              selectMode: blockSelectMode,\n              tablePath: '',\n              topLevelArgs,\n              topLevelTableName,\n              withTabledFields,\n            })\n\n            if (\n              typeof blockSelect === 'object' &&\n              withBlock.with._locales &&\n              Object.keys(withBlock.with._locales.columns).length === 1\n            ) {\n              delete withBlock.with._locales\n            }\n          }\n        })\n\n        break\n      }\n\n      case 'group':\n      case 'tab': {\n        const fieldSelect = select?.[field.name]\n\n        if (fieldSelect === false) {\n          break\n        }\n\n        traverseFields({\n          _locales,\n          adapter,\n          collectionSlug,\n          currentArgs,\n          currentTableName,\n          depth,\n          draftsEnabled,\n          fields: field.flattenedFields,\n          joinQuery,\n          joins,\n          locale,\n          parentIsLocalized: parentIsLocalized || field.localized,\n          path: `${path}${field.name}_`,\n          select: typeof fieldSelect === 'object' ? fieldSelect : undefined,\n          selectAllOnCurrentLevel:\n            selectAllOnCurrentLevel ||\n            fieldSelect === true ||\n            (selectMode === 'exclude' && typeof fieldSelect === 'undefined'),\n          selectMode,\n          tablePath: `${tablePath}${toSnakeCase(field.name)}_`,\n          topLevelArgs,\n          topLevelTableName,\n          versions,\n          withTabledFields,\n        })\n\n        break\n      }\n      case 'join': {\n        // when `joinsQuery` is false, do not join\n        if (joinQuery === false) {\n          break\n        }\n\n        if (\n          (select && selectMode === 'include' && !select[field.name]) ||\n          (selectMode === 'exclude' && select[field.name] === false)\n        ) {\n          break\n        }\n\n        const joinSchemaPath = `${path.replaceAll('_', '.')}${field.name}`\n\n        if (joinQuery[joinSchemaPath] === false) {\n          break\n        }\n\n        const {\n          count: shouldCount = false,\n          limit: limitArg = field.defaultLimit ?? 10,\n          page,\n          sort = field.defaultSort,\n          where,\n        } = joinQuery[joinSchemaPath] || {}\n        let limit = limitArg\n\n        if (limit !== 0) {\n          // get an additional document and slice it later to determine if there is a next page\n          limit += 1\n        }\n\n        const columnName = `${path.replaceAll('.', '_')}${field.name}`\n\n        const db = adapter.drizzle as LibSQLDatabase\n\n        if (Array.isArray(field.collection)) {\n          let currentQuery: null | SQLSelect = null\n          const onPath = field.on.split('.').join('_')\n\n          if (Array.isArray(sort)) {\n            throw new Error('Not implemented')\n          }\n\n          let sanitizedSort = sort\n\n          if (!sanitizedSort) {\n            if (\n              field.collection.some((collection) =>\n                adapter.payload.collections[collection].config.fields.some(\n                  (f) => f.type === 'date' && f.name === 'createdAt',\n                ),\n              )\n            ) {\n              sanitizedSort = '-createdAt'\n            } else {\n              sanitizedSort = 'id'\n            }\n          }\n\n          const sortOrder = sanitizedSort.startsWith('-') ? desc : asc\n          sanitizedSort = sanitizedSort.replace('-', '')\n\n          const sortPath = sanitizedSort.split('.').join('_')\n\n          const wherePaths: string[] = []\n\n          if (where) {\n            flattenAllWherePaths(where, wherePaths)\n          }\n\n          for (const collection of field.collection) {\n            const joinCollectionTableName = adapter.tableNameMap.get(toSnakeCase(collection))\n\n            const table = adapter.tables[joinCollectionTableName]\n\n            const sortColumn = table[sortPath]\n\n            const selectFields = {\n              id: adapter.tables[joinCollectionTableName].id,\n              parent: sql`${adapter.tables[joinCollectionTableName][onPath]}`.as(onPath),\n              relationTo: sql`${collection}`.as('relationTo'),\n              sortPath: sql`${sortColumn ? sortColumn : null}`.as('sortPath'),\n            }\n\n            // Select for WHERE and Fallback NULL\n            for (const path of wherePaths) {\n              if (adapter.tables[joinCollectionTableName][path]) {\n                selectFields[path] = sql`${adapter.tables[joinCollectionTableName][path]}`.as(path)\n                // Allow to filter by collectionSlug\n              } else if (path !== 'relationTo') {\n                selectFields[path] = sql`null`.as(path)\n              }\n            }\n\n            const query = db.select(selectFields).from(adapter.tables[joinCollectionTableName])\n            if (currentQuery === null) {\n              currentQuery = query as unknown as SQLSelect\n            } else {\n              currentQuery = currentQuery.unionAll(query) as SQLSelect\n            }\n          }\n\n          const subQueryAlias = `${columnName}_subquery`\n\n          let sqlWhere = eq(\n            sql.raw(`\"${currentTableName}\".\"id\"`),\n            sql.raw(`\"${subQueryAlias}\".\"${onPath}\"`),\n          )\n\n          if (where && Object.keys(where).length > 0) {\n            sqlWhere = and(sqlWhere, buildSQLWhere(where, subQueryAlias))\n          }\n\n          if (shouldCount) {\n            currentArgs.extras[`${columnName}_count`] = sql`${db\n              .select({ count: count() })\n              .from(sql`${currentQuery.as(subQueryAlias)}`)\n              .where(sqlWhere)}`.as(`${columnName}_count`)\n          }\n\n          currentQuery = currentQuery.orderBy(sortOrder(sql`\"sortPath\"`)) as SQLSelect\n\n          if (page && limit !== 0) {\n            const offset = (page - 1) * limit\n            if (offset > 0) {\n              currentQuery = currentQuery.offset(offset) as SQLSelect\n            }\n          }\n\n          if (limit) {\n            currentQuery = currentQuery.limit(limit) as SQLSelect\n          }\n\n          currentArgs.extras[columnName] = sql`${db\n            .select({\n              id: jsonAggBuildObject(adapter, {\n                id: sql.raw(`\"${subQueryAlias}\".\"id\"`),\n                relationTo: sql.raw(`\"${subQueryAlias}\".\"relationTo\"`),\n              }),\n            })\n            .from(sql`${currentQuery.as(subQueryAlias)}`)\n            .where(sqlWhere)}`.as(columnName)\n        } else {\n          const useDrafts =\n            (versions || draftsEnabled) &&\n            Boolean(adapter.payload.collections[field.collection].config.versions.drafts)\n\n          const fields = useDrafts\n            ? buildVersionCollectionFields(\n                adapter.payload.config,\n                adapter.payload.collections[field.collection].config,\n                true,\n              )\n            : adapter.payload.collections[field.collection].config.flattenedFields\n\n          const joinCollectionTableName = adapter.tableNameMap.get(\n            useDrafts\n              ? `_${toSnakeCase(field.collection)}${adapter.versionsSuffix}`\n              : toSnakeCase(field.collection),\n          )\n\n          const joins: BuildQueryJoinAliases = []\n\n          const currentIDColumn = versions\n            ? adapter.tables[currentTableName].parent\n            : adapter.tables[currentTableName].id\n\n          let joinQueryWhere: Where\n\n          const currentIDRaw = sql.raw(\n            `\"${getNameFromDrizzleTable(currentIDColumn.table)}\".\"${currentIDColumn.name}\"`,\n          )\n\n          if (Array.isArray(field.targetField.relationTo)) {\n            joinQueryWhere = {\n              [field.on]: {\n                equals: {\n                  relationTo: collectionSlug,\n                  value: rawConstraint(currentIDRaw),\n                },\n              },\n            }\n          } else {\n            joinQueryWhere = {\n              [field.on]: {\n                equals: rawConstraint(currentIDRaw),\n              },\n            }\n          }\n\n          if (where && Object.keys(where).length) {\n            joinQueryWhere = {\n              and: [joinQueryWhere, where],\n            }\n          }\n\n          if (useDrafts) {\n            joinQueryWhere = combineQueries(appendVersionToQueryKey(joinQueryWhere), {\n              latest: { equals: true },\n            })\n          }\n\n          const columnName = `${path.replaceAll('.', '_')}${field.name}`\n\n          const subQueryAlias = `${columnName}_alias`\n\n          const { newAliasTable } = getTableAlias({\n            adapter,\n            tableName: joinCollectionTableName,\n          })\n\n          const {\n            orderBy,\n            selectFields,\n            where: subQueryWhere,\n          } = buildQuery({\n            adapter,\n            aliasTable: newAliasTable,\n            fields,\n            joins,\n            locale,\n            parentIsLocalized,\n            selectLocale: true,\n            sort: useDrafts\n              ? getQueryDraftsSort({\n                  collectionConfig: adapter.payload.collections[field.collection].config,\n                  sort,\n                })\n              : sort,\n            tableName: joinCollectionTableName,\n            where: joinQueryWhere,\n          })\n\n          for (let key in selectFields) {\n            const val = selectFields[key]\n\n            if (val.table && getNameFromDrizzleTable(val.table) === joinCollectionTableName) {\n              delete selectFields[key]\n              key = key.split('.').pop()\n              selectFields[key] = newAliasTable[key]\n            }\n          }\n\n          if (useDrafts) {\n            selectFields.parent = newAliasTable.parent\n          }\n\n          let query: SQLiteSelect = db\n            .select(selectFields as any)\n            .from(newAliasTable)\n            .where(subQueryWhere)\n            .orderBy(() => orderBy.map(({ column, order }) => order(column)))\n            .$dynamic()\n\n          joins.forEach(({ type, condition, table }) => {\n            query = query[type ?? 'leftJoin'](table, condition)\n          })\n\n          if (page && limit !== 0) {\n            const offset = (page - 1) * limit - 1\n            if (offset > 0) {\n              query = query.offset(offset)\n            }\n          }\n\n          if (limit !== 0) {\n            query = query.limit(limit)\n          }\n\n          const subQuery = query.as(subQueryAlias)\n\n          if (shouldCount) {\n            currentArgs.extras[`${columnName}_count`] = sql`${db\n              .select({\n                count: count(),\n              })\n              .from(\n                sql`${db\n                  .select(selectFields as any)\n                  .from(newAliasTable)\n                  .where(subQueryWhere)\n                  .as(`${subQueryAlias}_count_subquery`)}`,\n              )}`.as(`${subQueryAlias}_count`)\n          }\n\n          currentArgs.extras[columnName] = sql`${db\n            .select({\n              result: jsonAggBuildObject(adapter, {\n                id: sql.raw(`\"${subQueryAlias}\".${useDrafts ? 'parent_id' : 'id'}`),\n                ...(selectFields._locale && {\n                  locale: sql.raw(`\"${subQueryAlias}\".${selectFields._locale.name}`),\n                }),\n              }),\n            })\n            .from(sql`${subQuery}`)}`.as(subQueryAlias)\n        }\n\n        break\n      }\n\n      case 'point': {\n        if (adapter.name === 'sqlite') {\n          break\n        }\n\n        const args = isFieldLocalized ? _locales : currentArgs\n        if (!args.columns) {\n          args.columns = {}\n        }\n\n        if (!args.extras) {\n          args.extras = {}\n        }\n\n        const name = `${path}${field.name}`\n\n        // Drizzle handles that poorly. See https://github.com/drizzle-team/drizzle-orm/issues/2526\n        // Additionally, this way we format the column value straight in the database using ST_AsGeoJSON\n        args.columns[name] = false\n\n        let shouldSelect = false\n\n        if (select || selectAllOnCurrentLevel) {\n          if (\n            selectAllOnCurrentLevel ||\n            (selectMode === 'include' && select[field.name] === true) ||\n            (selectMode === 'exclude' && typeof select[field.name] === 'undefined')\n          ) {\n            shouldSelect = true\n          }\n        } else {\n          shouldSelect = true\n        }\n\n        if (shouldSelect) {\n          args.extras[name] = sql.raw(`ST_AsGeoJSON(${toSnakeCase(name)})::jsonb`).as(name)\n        }\n        break\n      }\n\n      case 'select': {\n        if (select && !selectAllOnCurrentLevel) {\n          if (\n            (selectMode === 'include' && !select[field.name]) ||\n            (selectMode === 'exclude' && select[field.name] === false)\n          ) {\n            break\n          }\n        }\n\n        if (field.hasMany) {\n          const withSelect: Result = {\n            columns: {\n              id: false,\n              order: false,\n              parent: false,\n            },\n            orderBy: ({ order }, { asc }) => [asc(order)],\n          }\n\n          currentArgs.with[`${path}${field.name}`] = withSelect\n          break\n        }\n\n        if (select || selectAllOnCurrentLevel) {\n          const fieldPath = `${path}${field.name}`\n\n          if ((isFieldLocalized || parentIsLocalized) && _locales) {\n            _locales.columns[fieldPath] = true\n          } else if (adapter.tables[currentTableName]?.[fieldPath]) {\n            currentArgs.columns[fieldPath] = true\n          }\n        }\n\n        break\n      }\n\n      default: {\n        if (!select && !selectAllOnCurrentLevel) {\n          break\n        }\n\n        if (\n          selectAllOnCurrentLevel ||\n          (selectMode === 'include' && select[field.name] === true) ||\n          (selectMode === 'exclude' && typeof select[field.name] === 'undefined')\n        ) {\n          const fieldPath = `${path}${field.name}`\n\n          if ((isFieldLocalized || parentIsLocalized) && _locales) {\n            _locales.columns[fieldPath] = true\n          } else if (adapter.tables[currentTableName]?.[fieldPath]) {\n            currentArgs.columns[fieldPath] = true\n          }\n\n          if (\n            !withTabledFields.rels &&\n            (field.type === 'relationship' || field.type === 'upload') &&\n            (field.hasMany || Array.isArray(field.relationTo))\n          ) {\n            withTabledFields.rels = true\n          }\n\n          if (!withTabledFields.numbers && field.type === 'number' && field.hasMany) {\n            withTabledFields.numbers = true\n          }\n\n          if (!withTabledFields.texts && field.type === 'text' && field.hasMany) {\n            withTabledFields.texts = true\n          }\n        }\n\n        break\n      }\n    }\n  })\n\n  return topLevelArgs\n}\n"],"names":["and","asc","count","desc","eq","or","sql","appendVersionToQueryKey","buildVersionCollectionFields","combineQueries","getQueryDraftsSort","fieldIsVirtual","fieldShouldBeLocalized","toSnakeCase","buildQuery","getTableAlias","operatorMap","getArrayRelationName","getNameFromDrizzleTable","jsonAggBuildObject","rawConstraint","InternalBlockTableNameIndex","resolveBlockTableName","flattenAllWherePaths","where","paths","k","includes","toUpperCase","Array","isArray","whereField","push","split","join","buildSQLWhere","alias","op","accumulated","payloadOperator","Object","keys","value","raw","traverseFields","_locales","adapter","collectionSlug","currentArgs","currentTableName","depth","draftsEnabled","fields","joinQuery","joins","locale","parentIsLocalized","path","select","selectAllOnCurrentLevel","selectMode","tablePath","topLevelArgs","topLevelTableName","versions","withTabledFields","forEach","field","isFieldLocalized","type","hasMany","relationTo","with","name","arraySelect","withArray","columns","id","_order","_parentID","orderBy","arrayTableName","tableNameMap","get","tables","_locale","_uuid","arrayTableNameWithLocales","localesSuffix","relationName","tableName","flattenedFields","localized","undefined","length","blocksSelect","blocksAsJSON","fieldPath","blockReferences","blocks","_block","block","payload","blockKey","slug","blockSelect","blockSelectMode","withBlock","_path","fieldSelect","joinSchemaPath","replaceAll","shouldCount","limit","limitArg","defaultLimit","page","sort","defaultSort","columnName","db","drizzle","collection","currentQuery","onPath","on","Error","sanitizedSort","some","collections","config","f","sortOrder","startsWith","replace","sortPath","wherePaths","joinCollectionTableName","table","sortColumn","selectFields","parent","as","query","from","unionAll","subQueryAlias","sqlWhere","extras","offset","useDrafts","Boolean","drafts","versionsSuffix","currentIDColumn","joinQueryWhere","currentIDRaw","targetField","equals","latest","newAliasTable","subQueryWhere","aliasTable","selectLocale","collectionConfig","key","val","pop","map","column","order","$dynamic","condition","subQuery","result","args","shouldSelect","withSelect","rels","numbers","texts"],"mappings":"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"}