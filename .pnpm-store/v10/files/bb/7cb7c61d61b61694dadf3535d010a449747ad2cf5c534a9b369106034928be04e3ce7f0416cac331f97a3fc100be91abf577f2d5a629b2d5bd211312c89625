{"version":3,"sources":["../../../src/resolvers/globals/findVersionByID.ts"],"sourcesContent":["import type { Document, PayloadRequest, SanitizedGlobalConfig } from 'payload'\n\nimport { findVersionByIDOperationGlobal, isolateObjectProperty } from 'payload'\n\nimport type { Context } from '../types.js'\n\nexport type Resolver = (\n  _: unknown,\n  args: {\n    draft?: boolean\n    fallbackLocale?: string\n    id: number | string\n    locale?: string\n  },\n  context: {\n    req: PayloadRequest\n  },\n) => Promise<Document>\n\nexport function findVersionByID(globalConfig: SanitizedGlobalConfig): Resolver {\n  return async function resolver(_, args, context: Context) {\n    if (args.locale) {\n      context.req.locale = args.locale\n    }\n    if (args.fallbackLocale) {\n      context.req.fallbackLocale = args.fallbackLocale\n    }\n\n    const options = {\n      id: args.id,\n      depth: 0,\n      draft: args.draft,\n      globalConfig,\n      req: isolateObjectProperty(context.req, 'transactionID'),\n    }\n\n    const result = await findVersionByIDOperationGlobal(options)\n    return result\n  }\n}\n"],"names":["findVersionByIDOperationGlobal","isolateObjectProperty","findVersionByID","globalConfig","resolver","_","args","context","locale","req","fallbackLocale","options","id","depth","draft","result"],"mappings":"AAEA,SAASA,8BAA8B,EAAEC,qBAAqB,QAAQ,UAAS;AAiB/E,OAAO,SAASC,gBAAgBC,YAAmC;IACjE,OAAO,eAAeC,SAASC,CAAC,EAAEC,IAAI,EAAEC,OAAgB;QACtD,IAAID,KAAKE,MAAM,EAAE;YACfD,QAAQE,GAAG,CAACD,MAAM,GAAGF,KAAKE,MAAM;QAClC;QACA,IAAIF,KAAKI,cAAc,EAAE;YACvBH,QAAQE,GAAG,CAACC,cAAc,GAAGJ,KAAKI,cAAc;QAClD;QAEA,MAAMC,UAAU;YACdC,IAAIN,KAAKM,EAAE;YACXC,OAAO;YACPC,OAAOR,KAAKQ,KAAK;YACjBX;YACAM,KAAKR,sBAAsBM,QAAQE,GAAG,EAAE;QAC1C;QAEA,MAAMM,SAAS,MAAMf,+BAA+BW;QACpD,OAAOI;IACT;AACF"}