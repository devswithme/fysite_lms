{"version":3,"file":"index.js","names":["useRouter","useSearchParams","formatAdminURL","React","Fragment","useCallback","useEffect","useMemo","useRef","useState","DocumentControls","DocumentDrawerHeader","useDocumentDrawerContext","DocumentFields","DocumentLocked","DocumentTakeOver","LeaveWithoutSaving","LivePreviewWindow","Upload","Form","useAuth","useConfig","useDocumentEvents","useDocumentInfo","useEditDepth","useLivePreviewContext","OperationProvider","useRouteTransition","useServerFunctions","UploadControlsProvider","useUploadEdits","abortAndIgnore","handleAbortRef","handleBackToDashboard","handleGoBack","handleTakeOver","Auth","SetDocumentStepNav","SetDocumentTitle","baseClass","DefaultEditView","BeforeDocumentControls","Description","EditMenuItems","PreviewButton","PublishButton","SaveButton","SaveDraftButton","CustomUpload","UploadControls","id","action","AfterDocument","AfterFields","apiURL","BeforeFields","collectionSlug","currentEditor","disableActions","disableCreate","disableLeaveWithoutSaving","docPermissions","documentIsLocked","documentLockState","getDocPermissions","getDocPreferences","globalSlug","hasPublishPermission","hasSavePermission","incrementVersionCount","initialState","isEditing","isInitializing","isTrashed","lastUpdateTime","redirectAfterCreate","redirectAfterDelete","redirectAfterDuplicate","redirectAfterRestore","savedDocumentData","setCurrentEditor","setDocumentIsLocked","unlockDocument","updateDocumentEditor","updateSavedDocumentData","clearDoc","drawerSlug","onDelete","onDuplicate","onRestore","onSave","onSaveFromContext","isInDrawer","Boolean","refreshCookieAsync","user","config","admin","userSlug","routes","adminRoute","getEntityConfig","collectionConfig","globalConfig","depth","router","params","reportUpdate","resetUploadEdits","getFormState","startRouteTransition","isLivePreviewEnabled","isLivePreviewing","previewWindowType","abortOnChangeRef","abortOnSaveRef","locale","get","entitySlug","slug","operation","auth","undefined","upload","docConfig","lockDocumentsProp","lockDocuments","isLockingEnabled","lockDurationDefault","lockDuration","duration","lockDurationInMilliseconds","autosaveEnabled","versions","drafts","autosave","preventLeaveWithoutSaving","isReadOnlyForIncomingUser","setIsReadOnlyForIncomingUser","showTakeOverModal","setShowTakeOverModal","editSessionStartTime","setEditSessionStartTime","Date","now","lockExpiryTime","isLockExpired","schemaPathSegments","validateBeforeSubmit","setValidateBeforeSubmit","disableLocalStrategy","nextHrefRef","handleDocumentLocking","lockedState","previousOwnerID","current","lockedUserID","hasShownLockedModal","isLocked","handlePrevent","nextHref","handleLeaveConfirm","lockUser","isLockOwnedByCurrentUser","nextPath","URL","pathname","isInternalView","some","path","includes","err","console","error","json","controller","document","doc","result","updatedAt","toISOString","redirectRoute","push","docPreferences","state","data","renderAllFields","returnLockStatus","schemaPath","join","signal","skipValidation","onChange","formState","prevFormState","submitted","currentTime","timeSinceLastUpdate","updateLastEdited","abortOnChange","abortOnSave","shouldShowDocumentLockedModal","isFolderCollection","folders","_jsx","className","filter","_jsxs","disabled","disableValidationOnSubmit","isDocumentForm","method","onSuccess","showDocumentID","isActive","onReadOnly","onTakeOver","onConfirm","onPrevent","pluralLabel","labels","plural","useAsTitle","fallback","toString","customComponents","onDrawerCreateNew","permissions","readOnlyForIncomingUser","email","loginWithUsername","readOnly","requirePassword","useAPIKey","username","verify","uploadConfig","fields","forceSidebarWrap"],"sources":["../../../src/views/Edit/index.tsx"],"sourcesContent":["/* eslint-disable react-compiler/react-compiler -- TODO: fix */\n'use client'\n\nimport type { ClientUser, DocumentViewClientProps, FormState } from 'payload'\n\nimport { useRouter, useSearchParams } from 'next/navigation.js'\nimport { formatAdminURL } from 'payload/shared'\nimport React, { Fragment, useCallback, useEffect, useMemo, useRef, useState } from 'react'\n\nimport type { FormProps } from '../../forms/Form/index.js'\nimport type { LockedState } from '../../utilities/buildFormState.js'\n\nimport { DocumentControls } from '../../elements/DocumentControls/index.js'\nimport { DocumentDrawerHeader } from '../../elements/DocumentDrawer/DrawerHeader/index.js'\nimport { useDocumentDrawerContext } from '../../elements/DocumentDrawer/Provider.js'\nimport { DocumentFields } from '../../elements/DocumentFields/index.js'\nimport { DocumentLocked } from '../../elements/DocumentLocked/index.js'\nimport { DocumentTakeOver } from '../../elements/DocumentTakeOver/index.js'\nimport { LeaveWithoutSaving } from '../../elements/LeaveWithoutSaving/index.js'\nimport { LivePreviewWindow } from '../../elements/LivePreview/Window/index.js'\nimport { Upload } from '../../elements/Upload/index.js'\nimport { Form } from '../../forms/Form/index.js'\nimport { useAuth } from '../../providers/Auth/index.js'\nimport { useConfig } from '../../providers/Config/index.js'\nimport { useDocumentEvents } from '../../providers/DocumentEvents/index.js'\nimport { useDocumentInfo } from '../../providers/DocumentInfo/index.js'\nimport { useEditDepth } from '../../providers/EditDepth/index.js'\nimport { useLivePreviewContext } from '../../providers/LivePreview/context.js'\nimport { OperationProvider } from '../../providers/Operation/index.js'\nimport { useRouteTransition } from '../../providers/RouteTransition/index.js'\nimport { useServerFunctions } from '../../providers/ServerFunctions/index.js'\nimport { UploadControlsProvider } from '../../providers/UploadControls/index.js'\nimport { useUploadEdits } from '../../providers/UploadEdits/index.js'\nimport { abortAndIgnore, handleAbortRef } from '../../utilities/abortAndIgnore.js'\nimport { handleBackToDashboard } from '../../utilities/handleBackToDashboard.js'\nimport { handleGoBack } from '../../utilities/handleGoBack.js'\nimport { handleTakeOver } from '../../utilities/handleTakeOver.js'\nimport { Auth } from './Auth/index.js'\nimport { SetDocumentStepNav } from './SetDocumentStepNav/index.js'\nimport { SetDocumentTitle } from './SetDocumentTitle/index.js'\nimport './index.scss'\n\nconst baseClass = 'collection-edit'\n\n// This component receives props only on _pages_\n// When rendered within a drawer, props are empty\n// This is solely to support custom edit views which get server-rendered\nexport function DefaultEditView({\n  BeforeDocumentControls,\n  Description,\n  EditMenuItems,\n  PreviewButton,\n  PublishButton,\n  SaveButton,\n  SaveDraftButton,\n  Upload: CustomUpload,\n  UploadControls,\n}: DocumentViewClientProps) {\n  const {\n    id,\n    action,\n    AfterDocument,\n    AfterFields,\n    apiURL,\n    BeforeFields,\n    collectionSlug,\n    currentEditor,\n    disableActions,\n    disableCreate,\n    disableLeaveWithoutSaving,\n    docPermissions,\n    documentIsLocked,\n    documentLockState,\n    getDocPermissions,\n    getDocPreferences,\n    globalSlug,\n    hasPublishPermission,\n    hasSavePermission,\n    incrementVersionCount,\n    initialState,\n    isEditing,\n    isInitializing,\n    isTrashed,\n    lastUpdateTime,\n    redirectAfterCreate,\n    redirectAfterDelete,\n    redirectAfterDuplicate,\n    redirectAfterRestore,\n    savedDocumentData,\n    setCurrentEditor,\n    setDocumentIsLocked,\n    unlockDocument,\n    updateDocumentEditor,\n    updateSavedDocumentData,\n  } = useDocumentInfo()\n\n  const {\n    clearDoc,\n    drawerSlug,\n    onDelete,\n    onDuplicate,\n    onRestore,\n    onSave: onSaveFromContext,\n  } = useDocumentDrawerContext()\n\n  const isInDrawer = Boolean(drawerSlug)\n\n  const { refreshCookieAsync, user } = useAuth()\n\n  const {\n    config,\n    config: {\n      admin: { user: userSlug },\n      routes: { admin: adminRoute },\n    },\n    getEntityConfig,\n  } = useConfig()\n\n  const collectionConfig = getEntityConfig({ collectionSlug })\n  const globalConfig = getEntityConfig({ globalSlug })\n\n  const depth = useEditDepth()\n\n  const router = useRouter()\n  const params = useSearchParams()\n  const { reportUpdate } = useDocumentEvents()\n  const { resetUploadEdits } = useUploadEdits()\n  const { getFormState } = useServerFunctions()\n  const { startRouteTransition } = useRouteTransition()\n  const { isLivePreviewEnabled, isLivePreviewing, previewWindowType } = useLivePreviewContext()\n\n  const abortOnChangeRef = useRef<AbortController>(null)\n  const abortOnSaveRef = useRef<AbortController>(null)\n\n  const locale = params.get('locale')\n\n  const entitySlug = collectionConfig?.slug || globalConfig?.slug\n\n  const operation = collectionSlug && !id ? 'create' : 'update'\n\n  const auth = collectionConfig ? collectionConfig.auth : undefined\n  const upload = collectionConfig ? collectionConfig.upload : undefined\n\n  const docConfig = collectionConfig || globalConfig\n\n  const lockDocumentsProp = docConfig?.lockDocuments !== undefined ? docConfig?.lockDocuments : true\n  const isLockingEnabled = lockDocumentsProp !== false\n\n  const lockDurationDefault = 300 // Default 5 minutes in seconds\n  const lockDuration =\n    typeof lockDocumentsProp === 'object' ? lockDocumentsProp.duration : lockDurationDefault\n  const lockDurationInMilliseconds = lockDuration * 1000\n\n  const autosaveEnabled = Boolean(\n    (collectionConfig?.versions?.drafts && collectionConfig?.versions?.drafts?.autosave) ||\n      (globalConfig?.versions?.drafts && globalConfig?.versions?.drafts?.autosave),\n  )\n\n  const preventLeaveWithoutSaving =\n    typeof disableLeaveWithoutSaving !== 'undefined' ? !disableLeaveWithoutSaving : !autosaveEnabled\n\n  const [isReadOnlyForIncomingUser, setIsReadOnlyForIncomingUser] = useState(false)\n  const [showTakeOverModal, setShowTakeOverModal] = useState(false)\n\n  const [editSessionStartTime, setEditSessionStartTime] = useState(Date.now())\n\n  const lockExpiryTime = lastUpdateTime + lockDurationInMilliseconds\n\n  const isLockExpired = Date.now() > lockExpiryTime\n\n  const schemaPathSegments = useMemo(() => [entitySlug], [entitySlug])\n\n  const [validateBeforeSubmit, setValidateBeforeSubmit] = useState(() => {\n    if (operation === 'create' && auth && !auth.disableLocalStrategy) {\n      return true\n    }\n\n    return false\n  })\n\n  const nextHrefRef = React.useRef<null | string>(null)\n\n  const handleDocumentLocking = useCallback(\n    (lockedState: LockedState) => {\n      setDocumentIsLocked(true)\n      const previousOwnerID =\n        typeof documentLockState.current?.user === 'object'\n          ? documentLockState.current?.user?.id\n          : documentLockState.current?.user\n\n      if (lockedState) {\n        const lockedUserID =\n          typeof lockedState.user === 'string' || typeof lockedState.user === 'number'\n            ? lockedState.user\n            : lockedState.user.id\n\n        if (!documentLockState.current || lockedUserID !== previousOwnerID) {\n          if (previousOwnerID === user.id && lockedUserID !== user.id) {\n            setShowTakeOverModal(true)\n            documentLockState.current.hasShownLockedModal = true\n          }\n\n          documentLockState.current = {\n            hasShownLockedModal: documentLockState.current?.hasShownLockedModal || false,\n            isLocked: true,\n            user: lockedState.user as ClientUser,\n          }\n          setCurrentEditor(lockedState.user as ClientUser)\n        }\n      }\n    },\n    [documentLockState, setCurrentEditor, setDocumentIsLocked, user?.id],\n  )\n\n  const handlePrevent = useCallback((nextHref: null | string) => {\n    nextHrefRef.current = nextHref\n  }, [])\n\n  const handleLeaveConfirm = useCallback(async () => {\n    const lockUser = documentLockState.current?.user\n\n    const isLockOwnedByCurrentUser =\n      typeof lockUser === 'object' ? lockUser?.id === user?.id : lockUser === user?.id\n\n    if (isLockingEnabled && documentIsLocked && (id || globalSlug)) {\n      // Check where user is trying to go\n      const nextPath = nextHrefRef.current ? new URL(nextHrefRef.current).pathname : ''\n      const isInternalView = ['/preview', '/api', '/versions'].some((path) =>\n        nextPath.includes(path),\n      )\n\n      // Only retain the lock if the user is still viewing the document\n      if (!isInternalView) {\n        if (isLockOwnedByCurrentUser) {\n          try {\n            await unlockDocument(id, collectionSlug ?? globalSlug)\n            setDocumentIsLocked(false)\n            setCurrentEditor(null)\n          } catch (err) {\n            console.error('Failed to unlock before leave', err)\n          }\n        }\n      }\n    }\n  }, [\n    collectionSlug,\n    documentIsLocked,\n    documentLockState,\n    globalSlug,\n    id,\n    isLockingEnabled,\n    setCurrentEditor,\n    setDocumentIsLocked,\n    unlockDocument,\n    user?.id,\n  ])\n\n  const onSave = useCallback(\n    async (json): Promise<FormState> => {\n      const controller = handleAbortRef(abortOnSaveRef)\n\n      const document = json?.doc || json?.result\n\n      reportUpdate({\n        id,\n        entitySlug,\n        updatedAt: document?.updatedAt || new Date().toISOString(),\n      })\n\n      // If we're editing the doc of the logged-in user,\n      // Refresh the cookie to get new permissions\n      if (user && collectionSlug === userSlug && id === user.id) {\n        void refreshCookieAsync()\n      }\n\n      incrementVersionCount()\n\n      if (typeof updateSavedDocumentData === 'function') {\n        void updateSavedDocumentData(document || {})\n      }\n\n      if (typeof onSaveFromContext === 'function') {\n        const operation = id ? 'update' : 'create'\n\n        void onSaveFromContext({\n          ...json,\n          operation,\n          updatedAt:\n            operation === 'update'\n              ? new Date().toISOString()\n              : document?.updatedAt || new Date().toISOString(),\n        })\n      }\n\n      if (!isEditing && depth < 2 && redirectAfterCreate !== false) {\n        // Redirect to the same locale if it's been set\n        const redirectRoute = formatAdminURL({\n          adminRoute,\n          path: `/collections/${collectionSlug}/${document?.id}${locale ? `?locale=${locale}` : ''}`,\n        })\n\n        startRouteTransition(() => router.push(redirectRoute))\n      } else {\n        resetUploadEdits()\n      }\n\n      await getDocPermissions(json)\n\n      if ((id || globalSlug) && !autosaveEnabled) {\n        const docPreferences = await getDocPreferences()\n\n        const { state } = await getFormState({\n          id,\n          collectionSlug,\n          data: document,\n          docPermissions,\n          docPreferences,\n          globalSlug,\n          operation,\n          renderAllFields: true,\n          returnLockStatus: false,\n          schemaPath: schemaPathSegments.join('.'),\n          signal: controller.signal,\n          skipValidation: true,\n        })\n\n        // Unlock the document after save\n        if (isLockingEnabled) {\n          setDocumentIsLocked(false)\n        }\n\n        abortOnSaveRef.current = null\n\n        return state\n      }\n    },\n    [\n      reportUpdate,\n      id,\n      entitySlug,\n      user,\n      collectionSlug,\n      userSlug,\n      incrementVersionCount,\n      updateSavedDocumentData,\n      onSaveFromContext,\n      redirectAfterCreate,\n      isEditing,\n      depth,\n      getDocPermissions,\n      globalSlug,\n      autosaveEnabled,\n      refreshCookieAsync,\n      adminRoute,\n      locale,\n      router,\n      resetUploadEdits,\n      getDocPreferences,\n      getFormState,\n      docPermissions,\n      operation,\n      schemaPathSegments,\n      isLockingEnabled,\n      setDocumentIsLocked,\n      startRouteTransition,\n    ],\n  )\n\n  const onChange: FormProps['onChange'][0] = useCallback(\n    async ({ formState: prevFormState, submitted }) => {\n      const controller = handleAbortRef(abortOnChangeRef)\n\n      const currentTime = Date.now()\n      const timeSinceLastUpdate = currentTime - editSessionStartTime\n\n      const updateLastEdited = isLockingEnabled && timeSinceLastUpdate >= 10000 // 10 seconds\n\n      if (updateLastEdited) {\n        setEditSessionStartTime(currentTime)\n      }\n\n      const docPreferences = await getDocPreferences()\n\n      const result = await getFormState({\n        id,\n        collectionSlug,\n        docPermissions,\n        docPreferences,\n        formState: prevFormState,\n        globalSlug,\n        operation,\n        skipValidation: !submitted,\n        // Performance optimization: Setting it to false ensure that only fields that have explicit requireRender set in the form state will be rendered (e.g. new array rows).\n        // We only want to render ALL fields on initial render, not in onChange.\n        renderAllFields: false,\n        returnLockStatus: isLockingEnabled,\n        schemaPath: schemaPathSegments.join('.'),\n        signal: controller.signal,\n        updateLastEdited,\n      })\n\n      if (!result) {\n        return\n      }\n\n      const { lockedState, state } = result\n\n      if (isLockingEnabled) {\n        handleDocumentLocking(lockedState)\n      }\n\n      abortOnChangeRef.current = null\n\n      return state\n    },\n    [\n      id,\n      collectionSlug,\n      getDocPreferences,\n      getFormState,\n      globalSlug,\n      handleDocumentLocking,\n      isLockingEnabled,\n      operation,\n      schemaPathSegments,\n      docPermissions,\n      editSessionStartTime,\n    ],\n  )\n\n  // Clean up when the component unmounts or when the document is unlocked\n  useEffect(() => {\n    return () => {\n      setShowTakeOverModal(false)\n    }\n  }, [])\n\n  useEffect(() => {\n    const abortOnChange = abortOnChangeRef.current\n    const abortOnSave = abortOnSaveRef.current\n\n    return () => {\n      abortAndIgnore(abortOnChange)\n      abortAndIgnore(abortOnSave)\n    }\n  }, [])\n\n  const shouldShowDocumentLockedModal =\n    documentIsLocked &&\n    currentEditor &&\n    (typeof currentEditor === 'object'\n      ? currentEditor.id !== user?.id\n      : currentEditor !== user?.id) &&\n    !isReadOnlyForIncomingUser &&\n    !showTakeOverModal &&\n    !documentLockState.current?.hasShownLockedModal &&\n    !isLockExpired\n\n  const isFolderCollection = config.folders && collectionSlug === config.folders?.slug\n\n  return (\n    <main\n      className={[\n        baseClass,\n        (id || globalSlug) && `${baseClass}--is-editing`,\n        globalSlug && `global-edit--${globalSlug}`,\n        collectionSlug && `collection-edit--${collectionSlug}`,\n        isLivePreviewing && previewWindowType === 'iframe' && `${baseClass}--is-live-previewing`,\n      ]\n        .filter(Boolean)\n        .join(' ')}\n    >\n      <OperationProvider operation={operation}>\n        <Form\n          action={action}\n          className={`${baseClass}__form`}\n          disabled={isReadOnlyForIncomingUser || isInitializing || !hasSavePermission || isTrashed}\n          disableValidationOnSubmit={!validateBeforeSubmit}\n          initialState={!isInitializing && initialState}\n          isDocumentForm={true}\n          isInitializing={isInitializing}\n          method={id ? 'PATCH' : 'POST'}\n          onChange={[onChange]}\n          onSuccess={onSave}\n        >\n          {isInDrawer && (\n            <DocumentDrawerHeader drawerSlug={drawerSlug} showDocumentID={!isFolderCollection} />\n          )}\n          {isLockingEnabled && shouldShowDocumentLockedModal && (\n            <DocumentLocked\n              handleGoBack={() => handleGoBack({ adminRoute, collectionSlug, router })}\n              isActive={shouldShowDocumentLockedModal}\n              onReadOnly={() => {\n                setIsReadOnlyForIncomingUser(true)\n                setShowTakeOverModal(false)\n              }}\n              onTakeOver={() =>\n                handleTakeOver(\n                  id,\n                  collectionSlug,\n                  globalSlug,\n                  user,\n                  false,\n                  updateDocumentEditor,\n                  setCurrentEditor,\n                  documentLockState,\n                  isLockingEnabled,\n                )\n              }\n              updatedAt={lastUpdateTime}\n              user={currentEditor}\n            />\n          )}\n          {isLockingEnabled && showTakeOverModal && (\n            <DocumentTakeOver\n              handleBackToDashboard={() => handleBackToDashboard({ adminRoute, router })}\n              isActive={showTakeOverModal}\n              onReadOnly={() => {\n                setIsReadOnlyForIncomingUser(true)\n                setShowTakeOverModal(false)\n              }}\n            />\n          )}\n          {!isReadOnlyForIncomingUser && preventLeaveWithoutSaving && (\n            <LeaveWithoutSaving onConfirm={handleLeaveConfirm} onPrevent={handlePrevent} />\n          )}\n          {!isInDrawer && (\n            <SetDocumentStepNav\n              collectionSlug={collectionConfig?.slug}\n              globalSlug={globalConfig?.slug}\n              id={id}\n              isTrashed={isTrashed}\n              pluralLabel={collectionConfig?.labels?.plural}\n              useAsTitle={collectionConfig?.admin?.useAsTitle}\n            />\n          )}\n          <SetDocumentTitle\n            collectionConfig={collectionConfig}\n            config={config}\n            fallback={depth <= 1 ? id?.toString() : undefined}\n            globalConfig={globalConfig}\n          />\n          <DocumentControls\n            apiURL={apiURL}\n            BeforeDocumentControls={BeforeDocumentControls}\n            customComponents={{\n              PreviewButton,\n              PublishButton,\n              SaveButton,\n              SaveDraftButton,\n            }}\n            data={savedDocumentData}\n            disableActions={disableActions || isFolderCollection || isTrashed}\n            disableCreate={disableCreate}\n            EditMenuItems={EditMenuItems}\n            hasPublishPermission={hasPublishPermission}\n            hasSavePermission={hasSavePermission}\n            id={id}\n            isEditing={isEditing}\n            isInDrawer={isInDrawer}\n            isTrashed={isTrashed}\n            onDelete={onDelete}\n            onDrawerCreateNew={clearDoc}\n            onDuplicate={onDuplicate}\n            onRestore={onRestore}\n            onSave={onSave}\n            onTakeOver={() =>\n              handleTakeOver(\n                id,\n                collectionSlug,\n                globalSlug,\n                user,\n                true,\n                updateDocumentEditor,\n                setCurrentEditor,\n                documentLockState,\n                isLockingEnabled,\n                setIsReadOnlyForIncomingUser,\n              )\n            }\n            permissions={docPermissions}\n            readOnlyForIncomingUser={isReadOnlyForIncomingUser}\n            redirectAfterDelete={redirectAfterDelete}\n            redirectAfterDuplicate={redirectAfterDuplicate}\n            redirectAfterRestore={redirectAfterRestore}\n            slug={collectionConfig?.slug || globalConfig?.slug}\n            user={currentEditor}\n          />\n          <div\n            className={[\n              `${baseClass}__main-wrapper`,\n              previewWindowType === 'popup' && `${baseClass}--detached`,\n            ]\n              .filter(Boolean)\n              .join(' ')}\n          >\n            <div\n              className={[\n                `${baseClass}__main`,\n                previewWindowType === 'popup' && `${baseClass}__main--popup-open`,\n              ]\n                .filter(Boolean)\n                .join(' ')}\n            >\n              <DocumentFields\n                AfterFields={AfterFields}\n                BeforeFields={\n                  BeforeFields || (\n                    <Fragment>\n                      {auth && (\n                        <Auth\n                          className={`${baseClass}__auth`}\n                          collectionSlug={collectionConfig.slug}\n                          disableLocalStrategy={collectionConfig.auth?.disableLocalStrategy}\n                          email={savedDocumentData?.email}\n                          loginWithUsername={auth?.loginWithUsername}\n                          operation={operation}\n                          readOnly={!hasSavePermission}\n                          requirePassword={!id}\n                          setValidateBeforeSubmit={setValidateBeforeSubmit}\n                          useAPIKey={auth.useAPIKey}\n                          username={savedDocumentData?.username}\n                          verify={auth.verify}\n                        />\n                      )}\n                      {upload && (\n                        <React.Fragment>\n                          <UploadControlsProvider>\n                            {CustomUpload || (\n                              <Upload\n                                collectionSlug={collectionConfig.slug}\n                                initialState={initialState}\n                                uploadConfig={upload}\n                                UploadControls={UploadControls}\n                              />\n                            )}\n                          </UploadControlsProvider>\n                        </React.Fragment>\n                      )}\n                    </Fragment>\n                  )\n                }\n                Description={Description}\n                docPermissions={docPermissions}\n                fields={docConfig.fields}\n                forceSidebarWrap={isLivePreviewing}\n                isTrashed={isTrashed}\n                readOnly={isReadOnlyForIncomingUser || !hasSavePermission || isTrashed}\n                schemaPathSegments={schemaPathSegments}\n              />\n              {AfterDocument}\n            </div>\n            {isLivePreviewEnabled && !isInDrawer && (\n              <LivePreviewWindow collectionSlug={collectionSlug} globalSlug={globalSlug} />\n            )}\n          </div>\n        </Form>\n      </OperationProvider>\n    </main>\n  )\n}\n"],"mappings":"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","ignoreList":[]}