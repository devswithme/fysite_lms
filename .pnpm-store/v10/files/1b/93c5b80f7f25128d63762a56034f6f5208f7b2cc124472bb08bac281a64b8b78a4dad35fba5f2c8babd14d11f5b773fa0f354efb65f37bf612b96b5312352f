{"version":3,"sources":["../../src/upsertRow/shouldUseOptimizedUpsertRow.ts"],"sourcesContent":["import type { FlattenedField } from 'payload'\n\n/**\n * Checks whether we should use the upsertRow function for the passed data and otherwise use a simple SQL SET call.\n * We need to use upsertRow only when the data has arrays, blocks, hasMany select/text/number, localized fields, complex relationships.\n */\nexport const shouldUseOptimizedUpsertRow = ({\n  data,\n  fields,\n}: {\n  data: Record<string, unknown>\n  fields: FlattenedField[]\n}) => {\n  for (const key in data) {\n    const value = data[key]\n    const field = fields.find((each) => each.name === key)\n\n    if (!field) {\n      continue\n    }\n\n    if (\n      field.type === 'array' ||\n      field.type === 'blocks' ||\n      ((field.type === 'text' ||\n        field.type === 'relationship' ||\n        field.type === 'upload' ||\n        field.type === 'select' ||\n        field.type === 'number') &&\n        field.hasMany) ||\n      ((field.type === 'relationship' || field.type === 'upload') &&\n        Array.isArray(field.relationTo)) ||\n      field.localized\n    ) {\n      return false\n    }\n\n    if (\n      (field.type === 'group' || field.type === 'tab') &&\n      value &&\n      typeof value === 'object' &&\n      !shouldUseOptimizedUpsertRow({\n        data: value as Record<string, unknown>,\n        fields: field.flattenedFields,\n      })\n    ) {\n      return false\n    }\n  }\n\n  return true\n}\n"],"names":["shouldUseOptimizedUpsertRow","data","fields","key","value","field","find","each","name","type","hasMany","Array","isArray","relationTo","localized","flattenedFields"],"mappings":"AAEA;;;CAGC,GACD,OAAO,MAAMA,8BAA8B,CAAC,EAC1CC,IAAI,EACJC,MAAM,EAIP;IACC,IAAK,MAAMC,OAAOF,KAAM;QACtB,MAAMG,QAAQH,IAAI,CAACE,IAAI;QACvB,MAAME,QAAQH,OAAOI,IAAI,CAAC,CAACC,OAASA,KAAKC,IAAI,KAAKL;QAElD,IAAI,CAACE,OAAO;YACV;QACF;QAEA,IACEA,MAAMI,IAAI,KAAK,WACfJ,MAAMI,IAAI,KAAK,YACd,AAACJ,CAAAA,MAAMI,IAAI,KAAK,UACfJ,MAAMI,IAAI,KAAK,kBACfJ,MAAMI,IAAI,KAAK,YACfJ,MAAMI,IAAI,KAAK,YACfJ,MAAMI,IAAI,KAAK,QAAO,KACtBJ,MAAMK,OAAO,IACd,AAACL,CAAAA,MAAMI,IAAI,KAAK,kBAAkBJ,MAAMI,IAAI,KAAK,QAAO,KACvDE,MAAMC,OAAO,CAACP,MAAMQ,UAAU,KAChCR,MAAMS,SAAS,EACf;YACA,OAAO;QACT;QAEA,IACE,AAACT,CAAAA,MAAMI,IAAI,KAAK,WAAWJ,MAAMI,IAAI,KAAK,KAAI,KAC9CL,SACA,OAAOA,UAAU,YACjB,CAACJ,4BAA4B;YAC3BC,MAAMG;YACNF,QAAQG,MAAMU,eAAe;QAC/B,IACA;YACA,OAAO;QACT;IACF;IAEA,OAAO;AACT,EAAC"}